-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polarFir_complexFIR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_realIn_AWVALID : OUT STD_LOGIC;
    m_axi_realIn_AWREADY : IN STD_LOGIC;
    m_axi_realIn_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_realIn_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_realIn_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_realIn_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_realIn_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_WVALID : OUT STD_LOGIC;
    m_axi_realIn_WREADY : IN STD_LOGIC;
    m_axi_realIn_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_realIn_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_WLAST : OUT STD_LOGIC;
    m_axi_realIn_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_ARVALID : OUT STD_LOGIC;
    m_axi_realIn_ARREADY : IN STD_LOGIC;
    m_axi_realIn_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_realIn_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_realIn_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_realIn_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_realIn_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_RVALID : IN STD_LOGIC;
    m_axi_realIn_RREADY : OUT STD_LOGIC;
    m_axi_realIn_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_realIn_RLAST : IN STD_LOGIC;
    m_axi_realIn_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_realIn_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_BVALID : IN STD_LOGIC;
    m_axi_realIn_BREADY : OUT STD_LOGIC;
    m_axi_realIn_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_realIn_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputReal : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_imgIn_AWVALID : OUT STD_LOGIC;
    m_axi_imgIn_AWREADY : IN STD_LOGIC;
    m_axi_imgIn_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_imgIn_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imgIn_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imgIn_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imgIn_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_WVALID : OUT STD_LOGIC;
    m_axi_imgIn_WREADY : IN STD_LOGIC;
    m_axi_imgIn_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imgIn_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_WLAST : OUT STD_LOGIC;
    m_axi_imgIn_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_ARVALID : OUT STD_LOGIC;
    m_axi_imgIn_ARREADY : IN STD_LOGIC;
    m_axi_imgIn_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_imgIn_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imgIn_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imgIn_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imgIn_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_RVALID : IN STD_LOGIC;
    m_axi_imgIn_RREADY : OUT STD_LOGIC;
    m_axi_imgIn_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_imgIn_RLAST : IN STD_LOGIC;
    m_axi_imgIn_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_imgIn_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_BVALID : IN STD_LOGIC;
    m_axi_imgIn_BREADY : OUT STD_LOGIC;
    m_axi_imgIn_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_imgIn_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputImg : IN STD_LOGIC_VECTOR (63 downto 0);
    realStream2_din : OUT STD_LOGIC_VECTOR (17 downto 0);
    realStream2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    realStream2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    realStream2_full_n : IN STD_LOGIC;
    realStream2_write : OUT STD_LOGIC;
    imgStream3_din : OUT STD_LOGIC_VECTOR (17 downto 0);
    imgStream3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    imgStream3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    imgStream3_full_n : IN STD_LOGIC;
    imgStream3_write : OUT STD_LOGIC;
    filterLength : IN STD_LOGIC_VECTOR (31 downto 0);
    inputLength_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    inputLength_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    inputLength_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    inputLength_c_full_n : IN STD_LOGIC;
    inputLength_c_write : OUT STD_LOGIC );
end;


architecture behav of polarFir_complexFIR is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv34_64 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001100100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal realIn_blk_n_AR : STD_LOGIC;
    signal realIn_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal imgIn_blk_n_AR : STD_LOGIC;
    signal imgIn_blk_n_R : STD_LOGIC;
    signal realStream2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal imgStream3_blk_n : STD_LOGIC;
    signal inputLength_c_blk_n : STD_LOGIC;
    signal kernelReal_V_fu_471_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_reg_820 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_fu_475_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_reg_825 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_1_fu_479_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_1_reg_830 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_1_fu_483_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_1_reg_835 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_2_fu_487_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_2_reg_840 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_2_fu_491_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_2_reg_845 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_3_fu_495_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_3_reg_850 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_3_fu_499_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_3_reg_855 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_4_fu_503_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_4_reg_860 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_4_fu_507_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_4_reg_865 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_5_fu_511_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_5_reg_870 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_5_fu_515_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_5_reg_875 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_6_fu_519_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_6_reg_880 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_6_fu_523_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_6_reg_885 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_7_fu_527_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_7_reg_890 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_7_fu_531_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_7_reg_895 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_8_fu_535_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_8_reg_900 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_8_fu_539_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_8_reg_905 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_9_fu_543_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_9_reg_910 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_9_fu_547_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_9_reg_915 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_10_fu_551_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_10_reg_920 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_10_fu_555_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_10_reg_925 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_11_fu_559_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_11_reg_930 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_11_fu_563_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_11_reg_935 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_12_fu_567_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_12_reg_940 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_12_fu_571_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_12_reg_945 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_13_fu_575_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_13_reg_950 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_13_fu_579_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_13_reg_955 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_14_fu_583_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_14_reg_960 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_14_fu_587_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_14_reg_965 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_15_fu_591_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_15_reg_970 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_15_fu_595_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_15_reg_975 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_16_fu_599_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_16_reg_980 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_16_fu_603_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_16_reg_985 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_17_fu_607_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_17_reg_990 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_17_fu_611_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_17_reg_995 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_18_fu_615_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_18_reg_1000 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_18_fu_619_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_18_reg_1005 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_19_fu_623_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_19_reg_1010 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_19_fu_627_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_19_reg_1015 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_20_fu_631_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_20_reg_1020 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_20_fu_635_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_20_reg_1025 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_21_fu_639_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_21_reg_1030 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_21_fu_643_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_21_reg_1035 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_22_fu_647_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_22_reg_1040 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_22_fu_651_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_22_reg_1045 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_23_fu_655_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_23_reg_1050 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_23_fu_659_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_23_reg_1055 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_24_fu_663_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelReal_V_24_reg_1060 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_24_fu_667_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernelImg_V_24_reg_1065 : STD_LOGIC_VECTOR (5 downto 0);
    signal realIn_addr_1_reg_1073 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln78_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgIn_addr_1_reg_1079 : STD_LOGIC_VECTOR (63 downto 0);
    signal inTempReal_V_fu_766_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal inTempReal_V_reg_1085 : STD_LOGIC_VECTOR (5 downto 0);
    signal inTempImg_V_fu_771_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal inTempImg_V_reg_1090 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_computeComplexFIR_fu_272_ap_start : STD_LOGIC;
    signal grp_computeComplexFIR_fu_272_ap_done : STD_LOGIC;
    signal grp_computeComplexFIR_fu_272_ap_idle : STD_LOGIC;
    signal grp_computeComplexFIR_fu_272_ap_ready : STD_LOGIC;
    signal grp_computeComplexFIR_fu_272_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_computeComplexFIR_fu_272_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_computeComplexFIR_fu_272_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state41_ignore_call19 : BOOLEAN;
    signal ap_block_state42_ignore_call19 : BOOLEAN;
    signal sext_ln57_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln58_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_state9 : BOOLEAN;
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_state12 : BOOLEAN;
    signal ap_block_state13 : BOOLEAN;
    signal ap_block_state14 : BOOLEAN;
    signal ap_block_state15 : BOOLEAN;
    signal ap_block_state16 : BOOLEAN;
    signal ap_block_state17 : BOOLEAN;
    signal ap_block_state18 : BOOLEAN;
    signal ap_block_state19 : BOOLEAN;
    signal ap_block_state20 : BOOLEAN;
    signal ap_block_state21 : BOOLEAN;
    signal ap_block_state22 : BOOLEAN;
    signal ap_block_state23 : BOOLEAN;
    signal ap_block_state24 : BOOLEAN;
    signal ap_block_state25 : BOOLEAN;
    signal ap_block_state26 : BOOLEAN;
    signal ap_block_state27 : BOOLEAN;
    signal ap_block_state28 : BOOLEAN;
    signal ap_block_state29 : BOOLEAN;
    signal ap_block_state30 : BOOLEAN;
    signal ap_block_state31 : BOOLEAN;
    signal ap_block_state32 : BOOLEAN;
    signal ap_block_state34_io : BOOLEAN;
    signal ap_block_state41 : BOOLEAN;
    signal k_fu_180 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln78_fu_683_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state42 : BOOLEAN;
    signal trunc_ln_fu_424_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln1_fu_445_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln78_fu_674_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_689_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln81_fu_697_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln81_fu_701_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln81_1_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln81_1_fu_711_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_716_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln82_fu_736_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_741_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component polarFir_computeComplexFIR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputReal : IN STD_LOGIC_VECTOR (5 downto 0);
        inputImg : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read32 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read33 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read34 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read35 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read36 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read37 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read38 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read39 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read40 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read41 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read42 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read43 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read44 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read45 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read46 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read47 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read48 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read49 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    grp_computeComplexFIR_fu_272 : component polarFir_computeComplexFIR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_computeComplexFIR_fu_272_ap_start,
        ap_done => grp_computeComplexFIR_fu_272_ap_done,
        ap_idle => grp_computeComplexFIR_fu_272_ap_idle,
        ap_ready => grp_computeComplexFIR_fu_272_ap_ready,
        inputReal => inTempReal_V_reg_1085,
        inputImg => inTempImg_V_reg_1090,
        p_read => kernelReal_V_reg_820,
        p_read1 => kernelReal_V_1_reg_830,
        p_read2 => kernelReal_V_2_reg_840,
        p_read3 => kernelReal_V_3_reg_850,
        p_read4 => kernelReal_V_4_reg_860,
        p_read5 => kernelReal_V_5_reg_870,
        p_read6 => kernelReal_V_6_reg_880,
        p_read7 => kernelReal_V_7_reg_890,
        p_read8 => kernelReal_V_8_reg_900,
        p_read9 => kernelReal_V_9_reg_910,
        p_read10 => kernelReal_V_10_reg_920,
        p_read11 => kernelReal_V_11_reg_930,
        p_read12 => kernelReal_V_12_reg_940,
        p_read13 => kernelReal_V_13_reg_950,
        p_read14 => kernelReal_V_14_reg_960,
        p_read15 => kernelReal_V_15_reg_970,
        p_read16 => kernelReal_V_16_reg_980,
        p_read17 => kernelReal_V_17_reg_990,
        p_read18 => kernelReal_V_18_reg_1000,
        p_read19 => kernelReal_V_19_reg_1010,
        p_read20 => kernelReal_V_20_reg_1020,
        p_read21 => kernelReal_V_21_reg_1030,
        p_read22 => kernelReal_V_22_reg_1040,
        p_read23 => kernelReal_V_23_reg_1050,
        p_read24 => kernelReal_V_24_reg_1060,
        p_read25 => kernelImg_V_reg_825,
        p_read26 => kernelImg_V_1_reg_835,
        p_read27 => kernelImg_V_2_reg_845,
        p_read28 => kernelImg_V_3_reg_855,
        p_read29 => kernelImg_V_4_reg_865,
        p_read30 => kernelImg_V_5_reg_875,
        p_read31 => kernelImg_V_6_reg_885,
        p_read32 => kernelImg_V_7_reg_895,
        p_read33 => kernelImg_V_8_reg_905,
        p_read34 => kernelImg_V_9_reg_915,
        p_read35 => kernelImg_V_10_reg_925,
        p_read36 => kernelImg_V_11_reg_935,
        p_read37 => kernelImg_V_12_reg_945,
        p_read38 => kernelImg_V_13_reg_955,
        p_read39 => kernelImg_V_14_reg_965,
        p_read40 => kernelImg_V_15_reg_975,
        p_read41 => kernelImg_V_16_reg_985,
        p_read42 => kernelImg_V_17_reg_995,
        p_read43 => kernelImg_V_18_reg_1005,
        p_read44 => kernelImg_V_19_reg_1015,
        p_read45 => kernelImg_V_20_reg_1025,
        p_read46 => kernelImg_V_21_reg_1035,
        p_read47 => kernelImg_V_22_reg_1045,
        p_read48 => kernelImg_V_23_reg_1055,
        p_read49 => kernelImg_V_24_reg_1065,
        ap_return_0 => grp_computeComplexFIR_fu_272_ap_return_0,
        ap_return_1 => grp_computeComplexFIR_fu_272_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln78_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_computeComplexFIR_fu_272_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_computeComplexFIR_fu_272_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                    grp_computeComplexFIR_fu_272_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_computeComplexFIR_fu_272_ap_ready = ap_const_logic_1)) then 
                    grp_computeComplexFIR_fu_272_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_fu_180 <= ap_const_lv31_0;
            elsif (((icmp_ln78_fu_678_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                k_fu_180 <= add_ln78_fu_683_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_678_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                imgIn_addr_1_reg_1079 <= sext_ln82_fu_751_p1;
                realIn_addr_1_reg_1073 <= sext_ln81_fu_726_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                inTempImg_V_reg_1090 <= inTempImg_V_fu_771_p1;
                inTempReal_V_reg_1085 <= inTempReal_V_fu_766_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                kernelImg_V_10_reg_925 <= kernelImg_V_10_fu_555_p1;
                kernelReal_V_10_reg_920 <= kernelReal_V_10_fu_551_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                kernelImg_V_11_reg_935 <= kernelImg_V_11_fu_563_p1;
                kernelReal_V_11_reg_930 <= kernelReal_V_11_fu_559_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                kernelImg_V_12_reg_945 <= kernelImg_V_12_fu_571_p1;
                kernelReal_V_12_reg_940 <= kernelReal_V_12_fu_567_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                kernelImg_V_13_reg_955 <= kernelImg_V_13_fu_579_p1;
                kernelReal_V_13_reg_950 <= kernelReal_V_13_fu_575_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                kernelImg_V_14_reg_965 <= kernelImg_V_14_fu_587_p1;
                kernelReal_V_14_reg_960 <= kernelReal_V_14_fu_583_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                kernelImg_V_15_reg_975 <= kernelImg_V_15_fu_595_p1;
                kernelReal_V_15_reg_970 <= kernelReal_V_15_fu_591_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                kernelImg_V_16_reg_985 <= kernelImg_V_16_fu_603_p1;
                kernelReal_V_16_reg_980 <= kernelReal_V_16_fu_599_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                kernelImg_V_17_reg_995 <= kernelImg_V_17_fu_611_p1;
                kernelReal_V_17_reg_990 <= kernelReal_V_17_fu_607_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                kernelImg_V_18_reg_1005 <= kernelImg_V_18_fu_619_p1;
                kernelReal_V_18_reg_1000 <= kernelReal_V_18_fu_615_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                kernelImg_V_19_reg_1015 <= kernelImg_V_19_fu_627_p1;
                kernelReal_V_19_reg_1010 <= kernelReal_V_19_fu_623_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                kernelImg_V_1_reg_835 <= kernelImg_V_1_fu_483_p1;
                kernelReal_V_1_reg_830 <= kernelReal_V_1_fu_479_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                kernelImg_V_20_reg_1025 <= kernelImg_V_20_fu_635_p1;
                kernelReal_V_20_reg_1020 <= kernelReal_V_20_fu_631_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                kernelImg_V_21_reg_1035 <= kernelImg_V_21_fu_643_p1;
                kernelReal_V_21_reg_1030 <= kernelReal_V_21_fu_639_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                kernelImg_V_22_reg_1045 <= kernelImg_V_22_fu_651_p1;
                kernelReal_V_22_reg_1040 <= kernelReal_V_22_fu_647_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                kernelImg_V_23_reg_1055 <= kernelImg_V_23_fu_659_p1;
                kernelReal_V_23_reg_1050 <= kernelReal_V_23_fu_655_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                kernelImg_V_24_reg_1065 <= kernelImg_V_24_fu_667_p1;
                kernelReal_V_24_reg_1060 <= kernelReal_V_24_fu_663_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                kernelImg_V_2_reg_845 <= kernelImg_V_2_fu_491_p1;
                kernelReal_V_2_reg_840 <= kernelReal_V_2_fu_487_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                kernelImg_V_3_reg_855 <= kernelImg_V_3_fu_499_p1;
                kernelReal_V_3_reg_850 <= kernelReal_V_3_fu_495_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                kernelImg_V_4_reg_865 <= kernelImg_V_4_fu_507_p1;
                kernelReal_V_4_reg_860 <= kernelReal_V_4_fu_503_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                kernelImg_V_5_reg_875 <= kernelImg_V_5_fu_515_p1;
                kernelReal_V_5_reg_870 <= kernelReal_V_5_fu_511_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                kernelImg_V_6_reg_885 <= kernelImg_V_6_fu_523_p1;
                kernelReal_V_6_reg_880 <= kernelReal_V_6_fu_519_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                kernelImg_V_7_reg_895 <= kernelImg_V_7_fu_531_p1;
                kernelReal_V_7_reg_890 <= kernelReal_V_7_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                kernelImg_V_8_reg_905 <= kernelImg_V_8_fu_539_p1;
                kernelReal_V_8_reg_900 <= kernelReal_V_8_fu_535_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                kernelImg_V_9_reg_915 <= kernelImg_V_9_fu_547_p1;
                kernelReal_V_9_reg_910 <= kernelReal_V_9_fu_543_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                kernelImg_V_reg_825 <= kernelImg_V_fu_475_p1;
                kernelReal_V_reg_820 <= kernelReal_V_fu_471_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_realIn_RVALID, m_axi_imgIn_RVALID, realStream2_full_n, imgStream3_full_n, inputLength_c_full_n, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state33, icmp_ln78_fu_678_p2, grp_computeComplexFIR_fu_272_ap_done, ap_block_state1_io, ap_block_state34_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln78_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if ((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if ((not(((grp_computeComplexFIR_fu_272_ap_done = ap_const_logic_0) or (imgStream3_full_n = ap_const_logic_0) or (realStream2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln78_fu_683_p2 <= std_logic_vector(unsigned(k_fu_180) + unsigned(ap_const_lv31_1));
    add_ln81_1_fu_711_p2 <= std_logic_vector(unsigned(zext_ln81_1_fu_707_p1) + unsigned(inputReal));
    add_ln81_fu_701_p2 <= std_logic_vector(unsigned(zext_ln81_fu_697_p1) + unsigned(ap_const_lv34_64));
    add_ln82_fu_736_p2 <= std_logic_vector(unsigned(zext_ln81_1_fu_707_p1) + unsigned(inputImg));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, inputLength_c_full_n, ap_block_state1_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state21_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state22_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state25_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state27_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state28_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state29_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state30_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state31_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state32_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(ap_block_state34_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state34_io)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state42_blk_assign_proc : process(realStream2_full_n, imgStream3_full_n, grp_computeComplexFIR_fu_272_ap_done)
    begin
        if (((grp_computeComplexFIR_fu_272_ap_done = ap_const_logic_0) or (imgStream3_full_n = ap_const_logic_0) or (realStream2_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
        if (((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, inputLength_c_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0));
    end process;


    ap_block_state10_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state10 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state11 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state12 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state13_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state13 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state14 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state15_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state15 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state16_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state16 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state17_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state17 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state18_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state18 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state19_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state19 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state1_io_assign_proc : process(m_axi_realIn_ARREADY, m_axi_imgIn_ARREADY)
    begin
                ap_block_state1_io <= ((m_axi_realIn_ARREADY = ap_const_logic_0) or (m_axi_imgIn_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state20_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state20 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state21_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state21 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state22_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state22 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state23_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state23 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state24_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state24 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state25_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state25 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state26_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state26 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state27_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state27 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state28_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state28 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state29_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state29 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state30_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state30 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state31_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state31 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state32_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state32 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state34_io_assign_proc : process(m_axi_realIn_ARREADY, m_axi_imgIn_ARREADY)
    begin
                ap_block_state34_io <= ((m_axi_realIn_ARREADY = ap_const_logic_0) or (m_axi_imgIn_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state41_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state41 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state41_ignore_call19_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state41_ignore_call19 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state42_assign_proc : process(realStream2_full_n, imgStream3_full_n)
    begin
                ap_block_state42 <= ((imgStream3_full_n = ap_const_logic_0) or (realStream2_full_n = ap_const_logic_0));
    end process;


    ap_block_state42_ignore_call19_assign_proc : process(realStream2_full_n, imgStream3_full_n)
    begin
                ap_block_state42_ignore_call19 <= ((imgStream3_full_n = ap_const_logic_0) or (realStream2_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state8 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID)
    begin
                ap_block_state9 <= ((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state33, icmp_ln78_fu_678_p2)
    begin
        if (((icmp_ln78_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33, icmp_ln78_fu_678_p2)
    begin
        if (((icmp_ln78_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_computeComplexFIR_fu_272_ap_start <= grp_computeComplexFIR_fu_272_ap_start_reg;
    icmp_ln78_fu_678_p2 <= "1" when (signed(zext_ln78_fu_674_p1) < signed(filterLength)) else "0";

    imgIn_blk_n_AR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_imgIn_ARREADY, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            imgIn_blk_n_AR <= m_axi_imgIn_ARREADY;
        else 
            imgIn_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    imgIn_blk_n_R_assign_proc : process(m_axi_imgIn_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            imgIn_blk_n_R <= m_axi_imgIn_RVALID;
        else 
            imgIn_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    imgStream3_blk_n_assign_proc : process(imgStream3_full_n, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            imgStream3_blk_n <= imgStream3_full_n;
        else 
            imgStream3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgStream3_din <= grp_computeComplexFIR_fu_272_ap_return_1;

    imgStream3_write_assign_proc : process(realStream2_full_n, imgStream3_full_n, ap_CS_fsm_state42, grp_computeComplexFIR_fu_272_ap_done)
    begin
        if ((not(((grp_computeComplexFIR_fu_272_ap_done = ap_const_logic_0) or (imgStream3_full_n = ap_const_logic_0) or (realStream2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            imgStream3_write <= ap_const_logic_1;
        else 
            imgStream3_write <= ap_const_logic_0;
        end if; 
    end process;

    inTempImg_V_fu_771_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    inTempReal_V_fu_766_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);

    inputLength_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputLength_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inputLength_c_blk_n <= inputLength_c_full_n;
        else 
            inputLength_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputLength_c_din <= filterLength;

    inputLength_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputLength_c_full_n, ap_block_state1_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inputLength_c_write <= ap_const_logic_1;
        else 
            inputLength_c_write <= ap_const_logic_0;
        end if; 
    end process;

    kernelImg_V_10_fu_555_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_11_fu_563_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_12_fu_571_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_13_fu_579_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_14_fu_587_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_15_fu_595_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_16_fu_603_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_17_fu_611_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_18_fu_619_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_19_fu_627_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_1_fu_483_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_20_fu_635_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_21_fu_643_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_22_fu_651_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_23_fu_659_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_24_fu_667_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_2_fu_491_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_3_fu_499_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_4_fu_507_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_5_fu_515_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_6_fu_523_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_7_fu_531_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_8_fu_539_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_9_fu_547_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelImg_V_fu_475_p1 <= m_axi_imgIn_RDATA(6 - 1 downto 0);
    kernelReal_V_10_fu_551_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_11_fu_559_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_12_fu_567_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_13_fu_575_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_14_fu_583_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_15_fu_591_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_16_fu_599_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_17_fu_607_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_18_fu_615_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_19_fu_623_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_1_fu_479_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_20_fu_631_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_21_fu_639_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_22_fu_647_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_23_fu_655_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_24_fu_663_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_2_fu_487_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_3_fu_495_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_4_fu_503_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_5_fu_511_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_6_fu_519_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_7_fu_527_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_8_fu_535_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_9_fu_543_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);
    kernelReal_V_fu_471_p1 <= m_axi_realIn_RDATA(6 - 1 downto 0);

    m_axi_imgIn_ARADDR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputLength_c_full_n, ap_CS_fsm_state34, imgIn_addr_1_reg_1079, sext_ln58_fu_455_p1, ap_block_state1_io, ap_block_state34_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            m_axi_imgIn_ARADDR <= imgIn_addr_1_reg_1079;
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_imgIn_ARADDR <= sext_ln58_fu_455_p1;
        else 
            m_axi_imgIn_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_imgIn_ARBURST <= ap_const_lv2_0;
    m_axi_imgIn_ARCACHE <= ap_const_lv4_0;
    m_axi_imgIn_ARID <= ap_const_lv1_0;

    m_axi_imgIn_ARLEN_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputLength_c_full_n, ap_CS_fsm_state34, ap_block_state1_io, ap_block_state34_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            m_axi_imgIn_ARLEN <= ap_const_lv32_1;
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_imgIn_ARLEN <= ap_const_lv32_19;
        else 
            m_axi_imgIn_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_imgIn_ARLOCK <= ap_const_lv2_0;
    m_axi_imgIn_ARPROT <= ap_const_lv3_0;
    m_axi_imgIn_ARQOS <= ap_const_lv4_0;
    m_axi_imgIn_ARREGION <= ap_const_lv4_0;
    m_axi_imgIn_ARSIZE <= ap_const_lv3_0;
    m_axi_imgIn_ARUSER <= ap_const_lv1_0;

    m_axi_imgIn_ARVALID_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputLength_c_full_n, ap_CS_fsm_state34, ap_block_state1_io, ap_block_state34_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34)) or (not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            m_axi_imgIn_ARVALID <= ap_const_logic_1;
        else 
            m_axi_imgIn_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_imgIn_AWADDR <= ap_const_lv64_0;
    m_axi_imgIn_AWBURST <= ap_const_lv2_0;
    m_axi_imgIn_AWCACHE <= ap_const_lv4_0;
    m_axi_imgIn_AWID <= ap_const_lv1_0;
    m_axi_imgIn_AWLEN <= ap_const_lv32_0;
    m_axi_imgIn_AWLOCK <= ap_const_lv2_0;
    m_axi_imgIn_AWPROT <= ap_const_lv3_0;
    m_axi_imgIn_AWQOS <= ap_const_lv4_0;
    m_axi_imgIn_AWREGION <= ap_const_lv4_0;
    m_axi_imgIn_AWSIZE <= ap_const_lv3_0;
    m_axi_imgIn_AWUSER <= ap_const_lv1_0;
    m_axi_imgIn_AWVALID <= ap_const_logic_0;
    m_axi_imgIn_BREADY <= ap_const_logic_0;

    m_axi_imgIn_RREADY_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state41)
    begin
        if (((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            m_axi_imgIn_RREADY <= ap_const_logic_1;
        else 
            m_axi_imgIn_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_imgIn_WDATA <= ap_const_lv32_0;
    m_axi_imgIn_WID <= ap_const_lv1_0;
    m_axi_imgIn_WLAST <= ap_const_logic_0;
    m_axi_imgIn_WSTRB <= ap_const_lv4_0;
    m_axi_imgIn_WUSER <= ap_const_lv1_0;
    m_axi_imgIn_WVALID <= ap_const_logic_0;

    m_axi_realIn_ARADDR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputLength_c_full_n, ap_CS_fsm_state34, realIn_addr_1_reg_1073, sext_ln57_fu_434_p1, ap_block_state1_io, ap_block_state34_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            m_axi_realIn_ARADDR <= realIn_addr_1_reg_1073;
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_realIn_ARADDR <= sext_ln57_fu_434_p1;
        else 
            m_axi_realIn_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_realIn_ARBURST <= ap_const_lv2_0;
    m_axi_realIn_ARCACHE <= ap_const_lv4_0;
    m_axi_realIn_ARID <= ap_const_lv1_0;

    m_axi_realIn_ARLEN_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputLength_c_full_n, ap_CS_fsm_state34, ap_block_state1_io, ap_block_state34_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            m_axi_realIn_ARLEN <= ap_const_lv32_1;
        elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_realIn_ARLEN <= ap_const_lv32_19;
        else 
            m_axi_realIn_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_realIn_ARLOCK <= ap_const_lv2_0;
    m_axi_realIn_ARPROT <= ap_const_lv3_0;
    m_axi_realIn_ARQOS <= ap_const_lv4_0;
    m_axi_realIn_ARREGION <= ap_const_lv4_0;
    m_axi_realIn_ARSIZE <= ap_const_lv3_0;
    m_axi_realIn_ARUSER <= ap_const_lv1_0;

    m_axi_realIn_ARVALID_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputLength_c_full_n, ap_CS_fsm_state34, ap_block_state1_io, ap_block_state34_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34)) or (not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (inputLength_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            m_axi_realIn_ARVALID <= ap_const_logic_1;
        else 
            m_axi_realIn_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_realIn_AWADDR <= ap_const_lv64_0;
    m_axi_realIn_AWBURST <= ap_const_lv2_0;
    m_axi_realIn_AWCACHE <= ap_const_lv4_0;
    m_axi_realIn_AWID <= ap_const_lv1_0;
    m_axi_realIn_AWLEN <= ap_const_lv32_0;
    m_axi_realIn_AWLOCK <= ap_const_lv2_0;
    m_axi_realIn_AWPROT <= ap_const_lv3_0;
    m_axi_realIn_AWQOS <= ap_const_lv4_0;
    m_axi_realIn_AWREGION <= ap_const_lv4_0;
    m_axi_realIn_AWSIZE <= ap_const_lv3_0;
    m_axi_realIn_AWUSER <= ap_const_lv1_0;
    m_axi_realIn_AWVALID <= ap_const_logic_0;
    m_axi_realIn_BREADY <= ap_const_logic_0;

    m_axi_realIn_RREADY_assign_proc : process(m_axi_realIn_RVALID, m_axi_imgIn_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state41)
    begin
        if (((not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((m_axi_imgIn_RVALID = ap_const_logic_0) or (m_axi_realIn_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            m_axi_realIn_RREADY <= ap_const_logic_1;
        else 
            m_axi_realIn_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_realIn_WDATA <= ap_const_lv32_0;
    m_axi_realIn_WID <= ap_const_lv1_0;
    m_axi_realIn_WLAST <= ap_const_logic_0;
    m_axi_realIn_WSTRB <= ap_const_lv4_0;
    m_axi_realIn_WUSER <= ap_const_lv1_0;
    m_axi_realIn_WVALID <= ap_const_logic_0;

    realIn_blk_n_AR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_realIn_ARREADY, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            realIn_blk_n_AR <= m_axi_realIn_ARREADY;
        else 
            realIn_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    realIn_blk_n_R_assign_proc : process(m_axi_realIn_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            realIn_blk_n_R <= m_axi_realIn_RVALID;
        else 
            realIn_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    realStream2_blk_n_assign_proc : process(realStream2_full_n, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            realStream2_blk_n <= realStream2_full_n;
        else 
            realStream2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    realStream2_din <= grp_computeComplexFIR_fu_272_ap_return_0;

    realStream2_write_assign_proc : process(realStream2_full_n, imgStream3_full_n, ap_CS_fsm_state42, grp_computeComplexFIR_fu_272_ap_done)
    begin
        if ((not(((grp_computeComplexFIR_fu_272_ap_done = ap_const_logic_0) or (imgStream3_full_n = ap_const_logic_0) or (realStream2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            realStream2_write <= ap_const_logic_1;
        else 
            realStream2_write <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln57_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_424_p4),64));

        sext_ln58_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_445_p4),64));

        sext_ln81_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_716_p4),64));

        sext_ln82_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_741_p4),64));

    shl_ln_fu_689_p3 <= (k_fu_180 & ap_const_lv2_0);
    trunc_ln1_fu_445_p4 <= inputImg(63 downto 2);
    trunc_ln2_fu_716_p4 <= add_ln81_1_fu_711_p2(63 downto 2);
    trunc_ln3_fu_741_p4 <= add_ln82_fu_736_p2(63 downto 2);
    trunc_ln_fu_424_p4 <= inputReal(63 downto 2);
    zext_ln78_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_180),32));
    zext_ln81_1_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_fu_701_p2),64));
    zext_ln81_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_689_p3),34));
end behav;
