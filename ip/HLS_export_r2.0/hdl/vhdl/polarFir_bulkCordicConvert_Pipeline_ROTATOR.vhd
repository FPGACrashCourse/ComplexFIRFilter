-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polarFir_bulkCordicConvert_Pipeline_ROTATOR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln68 : IN STD_LOGIC_VECTOR (23 downto 0);
    select_ln68_1 : IN STD_LOGIC_VECTOR (23 downto 0);
    sext_ln113 : IN STD_LOGIC_VECTOR (13 downto 0);
    currentCos_V_out : OUT STD_LOGIC_VECTOR (23 downto 0);
    currentCos_V_out_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (23 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of polarFir_bulkCordicConvert_Pipeline_ROTATOR is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln113_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cordicPhase_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordicPhase_V_ce0 : STD_LOGIC;
    signal cordicPhase_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1649_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentCos_V_3_fu_211_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentCos_V_3_reg_322 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentSin_V_3_fu_219_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentSin_V_3_reg_327 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln113_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_fu_46 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln1649_fu_251_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln113_cast_fu_107_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal currentCos_V_fu_50 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_allocacmp_currentCos_V_load : STD_LOGIC_VECTOR (23 downto 0);
    signal currentSin_V_fu_54 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_allocacmp_currentSin_V_load : STD_LOGIC_VECTOR (23 downto 0);
    signal i_fu_58 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln113_fu_140_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1488_fu_157_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1488cast_fu_161_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1488cast9_fu_171_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ashr_ln1488_1_fu_175_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ashr_ln1488_fu_165_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentCos_V_1_fu_187_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentCos_V_2_fu_199_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentSin_V_1_fu_193_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentSin_V_2_fu_205_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal cordicPhase_V_load_cast_fu_235_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln813_fu_239_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln813_fu_245_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component polarFir_bulkCordicConvert_Pipeline_ROTATOR_cordicPhase_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component polarFir_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    cordicPhase_V_U : component polarFir_bulkCordicConvert_Pipeline_ROTATOR_cordicPhase_V_ROM_AUTO_1R
    generic map (
        DataWidth => 12,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordicPhase_V_address0,
        ce0 => cordicPhase_V_ce0,
        q0 => cordicPhase_V_q0);

    flow_control_loop_pipe_sequential_init_U : component polarFir_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    currentCos_V_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    currentCos_V_fu_50 <= select_ln68_1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    currentCos_V_fu_50 <= currentCos_V_3_reg_322;
                end if;
            end if; 
        end if;
    end process;

    currentSin_V_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    currentSin_V_fu_54 <= select_ln68;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    currentSin_V_fu_54 <= currentSin_V_3_reg_327;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_fu_46 <= sext_ln113_cast_fu_107_p1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    empty_fu_46 <= select_ln1649_fu_251_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_58 <= ap_const_lv6_0;
                elsif (((icmp_ln113_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_58 <= add_ln113_fu_140_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln113_fu_134_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                currentCos_V_3_reg_322 <= currentCos_V_3_fu_211_p3;
                currentSin_V_3_reg_327 <= currentSin_V_3_fu_219_p3;
                icmp_ln1649_reg_312 <= icmp_ln1649_fu_181_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln113_fu_140_p2 <= std_logic_vector(unsigned(i_fu_58) + unsigned(ap_const_lv6_1));
    add_ln813_fu_239_p2 <= std_logic_vector(unsigned(empty_fu_46) + unsigned(cordicPhase_V_load_cast_fu_235_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln113_fu_134_p2)
    begin
        if (((icmp_ln113_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_currentCos_V_load_assign_proc : process(ap_enable_reg_pp0_iter2, currentCos_V_3_reg_322, ap_block_pp0_stage0, currentCos_V_fu_50)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_currentCos_V_load <= currentCos_V_3_reg_322;
        else 
            ap_sig_allocacmp_currentCos_V_load <= currentCos_V_fu_50;
        end if; 
    end process;


    ap_sig_allocacmp_currentSin_V_load_assign_proc : process(ap_enable_reg_pp0_iter2, currentSin_V_3_reg_327, ap_block_pp0_stage0, currentSin_V_fu_54)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_currentSin_V_load <= currentSin_V_3_reg_327;
        else 
            ap_sig_allocacmp_currentSin_V_load <= currentSin_V_fu_54;
        end if; 
    end process;

    ashr_ln1488_1_fu_175_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_currentSin_V_load),to_integer(unsigned('0' & trunc_ln1488cast9_fu_171_p1(24-1 downto 0)))));
    ashr_ln1488_fu_165_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_currentCos_V_load),to_integer(unsigned('0' & trunc_ln1488cast_fu_161_p1(24-1 downto 0)))));
    cordicPhase_V_address0 <= zext_ln113_fu_152_p1(6 - 1 downto 0);

    cordicPhase_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cordicPhase_V_ce0 <= ap_const_logic_1;
        else 
            cordicPhase_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cordicPhase_V_load_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordicPhase_V_q0),24));
    currentCos_V_1_fu_187_p2 <= std_logic_vector(unsigned(ashr_ln1488_1_fu_175_p2) + unsigned(ap_sig_allocacmp_currentCos_V_load));
    currentCos_V_2_fu_199_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_currentCos_V_load) - unsigned(ashr_ln1488_1_fu_175_p2));
    currentCos_V_3_fu_211_p3 <= 
        currentCos_V_1_fu_187_p2 when (icmp_ln1649_fu_181_p2(0) = '1') else 
        currentCos_V_2_fu_199_p2;
    currentCos_V_out <= currentCos_V_fu_50;

    currentCos_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln113_fu_134_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln113_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            currentCos_V_out_ap_vld <= ap_const_logic_1;
        else 
            currentCos_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    currentSin_V_1_fu_193_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_currentSin_V_load) - unsigned(ashr_ln1488_fu_165_p2));
    currentSin_V_2_fu_205_p2 <= std_logic_vector(unsigned(ashr_ln1488_fu_165_p2) + unsigned(ap_sig_allocacmp_currentSin_V_load));
    currentSin_V_3_fu_219_p3 <= 
        currentSin_V_1_fu_193_p2 when (icmp_ln1649_fu_181_p2(0) = '1') else 
        currentSin_V_2_fu_205_p2;
    icmp_ln113_fu_134_p2 <= "1" when (i_fu_58 = ap_const_lv6_20) else "0";
    icmp_ln1649_fu_181_p2 <= "1" when (signed(ap_sig_allocacmp_currentSin_V_load) > signed(ap_const_lv24_0)) else "0";
    p_out <= empty_fu_46;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln113_fu_134_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln113_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1649_fu_251_p3 <= 
        add_ln813_fu_239_p2 when (icmp_ln1649_reg_312(0) = '1') else 
        sub_ln813_fu_245_p2;
        sext_ln113_cast_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln113),24));

    sub_ln813_fu_245_p2 <= std_logic_vector(unsigned(empty_fu_46) - unsigned(cordicPhase_V_load_cast_fu_235_p1));
    trunc_ln1488_fu_157_p1 <= i_fu_58(5 - 1 downto 0);
    trunc_ln1488cast9_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1488_fu_157_p1),24));
    trunc_ln1488cast_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1488_fu_157_p1),24));
    zext_ln113_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_58),64));
end behav;
