-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polarFir is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMGIN_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IMGIN_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMGIN_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMGIN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMGIN_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMGIN_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMGIN_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMGIN_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_REALIN_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_REALIN_ID_WIDTH : INTEGER := 1;
    C_M_AXI_REALIN_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_REALIN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_REALIN_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_REALIN_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_REALIN_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_REALIN_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMGIN_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMGIN_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMGIN_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_REALIN_USER_VALUE : INTEGER := 0;
    C_M_AXI_REALIN_PROT_VALUE : INTEGER := 0;
    C_M_AXI_REALIN_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_imgIn_AWVALID : OUT STD_LOGIC;
    m_axi_imgIn_AWREADY : IN STD_LOGIC;
    m_axi_imgIn_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_ADDR_WIDTH-1 downto 0);
    m_axi_imgIn_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_ID_WIDTH-1 downto 0);
    m_axi_imgIn_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_imgIn_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imgIn_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imgIn_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_AWUSER_WIDTH-1 downto 0);
    m_axi_imgIn_WVALID : OUT STD_LOGIC;
    m_axi_imgIn_WREADY : IN STD_LOGIC;
    m_axi_imgIn_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_DATA_WIDTH-1 downto 0);
    m_axi_imgIn_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_DATA_WIDTH/8-1 downto 0);
    m_axi_imgIn_WLAST : OUT STD_LOGIC;
    m_axi_imgIn_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_ID_WIDTH-1 downto 0);
    m_axi_imgIn_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_WUSER_WIDTH-1 downto 0);
    m_axi_imgIn_ARVALID : OUT STD_LOGIC;
    m_axi_imgIn_ARREADY : IN STD_LOGIC;
    m_axi_imgIn_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_ADDR_WIDTH-1 downto 0);
    m_axi_imgIn_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_ID_WIDTH-1 downto 0);
    m_axi_imgIn_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_imgIn_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imgIn_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imgIn_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imgIn_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMGIN_ARUSER_WIDTH-1 downto 0);
    m_axi_imgIn_RVALID : IN STD_LOGIC;
    m_axi_imgIn_RREADY : OUT STD_LOGIC;
    m_axi_imgIn_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMGIN_DATA_WIDTH-1 downto 0);
    m_axi_imgIn_RLAST : IN STD_LOGIC;
    m_axi_imgIn_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMGIN_ID_WIDTH-1 downto 0);
    m_axi_imgIn_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMGIN_RUSER_WIDTH-1 downto 0);
    m_axi_imgIn_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_BVALID : IN STD_LOGIC;
    m_axi_imgIn_BREADY : OUT STD_LOGIC;
    m_axi_imgIn_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imgIn_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMGIN_ID_WIDTH-1 downto 0);
    m_axi_imgIn_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMGIN_BUSER_WIDTH-1 downto 0);
    m_axi_realIn_AWVALID : OUT STD_LOGIC;
    m_axi_realIn_AWREADY : IN STD_LOGIC;
    m_axi_realIn_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_ADDR_WIDTH-1 downto 0);
    m_axi_realIn_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_ID_WIDTH-1 downto 0);
    m_axi_realIn_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_realIn_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_realIn_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_realIn_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_AWUSER_WIDTH-1 downto 0);
    m_axi_realIn_WVALID : OUT STD_LOGIC;
    m_axi_realIn_WREADY : IN STD_LOGIC;
    m_axi_realIn_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_DATA_WIDTH-1 downto 0);
    m_axi_realIn_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_DATA_WIDTH/8-1 downto 0);
    m_axi_realIn_WLAST : OUT STD_LOGIC;
    m_axi_realIn_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_ID_WIDTH-1 downto 0);
    m_axi_realIn_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_WUSER_WIDTH-1 downto 0);
    m_axi_realIn_ARVALID : OUT STD_LOGIC;
    m_axi_realIn_ARREADY : IN STD_LOGIC;
    m_axi_realIn_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_ADDR_WIDTH-1 downto 0);
    m_axi_realIn_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_ID_WIDTH-1 downto 0);
    m_axi_realIn_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_realIn_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_realIn_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_realIn_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_realIn_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_REALIN_ARUSER_WIDTH-1 downto 0);
    m_axi_realIn_RVALID : IN STD_LOGIC;
    m_axi_realIn_RREADY : OUT STD_LOGIC;
    m_axi_realIn_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_REALIN_DATA_WIDTH-1 downto 0);
    m_axi_realIn_RLAST : IN STD_LOGIC;
    m_axi_realIn_RID : IN STD_LOGIC_VECTOR (C_M_AXI_REALIN_ID_WIDTH-1 downto 0);
    m_axi_realIn_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_REALIN_RUSER_WIDTH-1 downto 0);
    m_axi_realIn_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_BVALID : IN STD_LOGIC;
    m_axi_realIn_BREADY : OUT STD_LOGIC;
    m_axi_realIn_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_realIn_BID : IN STD_LOGIC_VECTOR (C_M_AXI_REALIN_ID_WIDTH-1 downto 0);
    m_axi_realIn_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_REALIN_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of polarFir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "polarFir_polarFir,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5146,HLS_SYN_LUT=9306,HLS_VERSION=2022_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal inputReal : STD_LOGIC_VECTOR (63 downto 0);
    signal inputImg : STD_LOGIC_VECTOR (63 downto 0);
    signal outputMag : STD_LOGIC_VECTOR (63 downto 0);
    signal outputPhase : STD_LOGIC_VECTOR (63 downto 0);
    signal inputLength : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal imgIn_AWREADY : STD_LOGIC;
    signal imgIn_WREADY : STD_LOGIC;
    signal imgIn_ARREADY : STD_LOGIC;
    signal imgIn_RVALID : STD_LOGIC;
    signal imgIn_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal imgIn_RLAST : STD_LOGIC;
    signal imgIn_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal imgIn_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal imgIn_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal imgIn_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal imgIn_BVALID : STD_LOGIC;
    signal realIn_AWREADY : STD_LOGIC;
    signal realIn_WREADY : STD_LOGIC;
    signal realIn_ARREADY : STD_LOGIC;
    signal realIn_RVALID : STD_LOGIC;
    signal realIn_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal realIn_RLAST : STD_LOGIC;
    signal realIn_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal realIn_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal realIn_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal realIn_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal realIn_BVALID : STD_LOGIC;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_outputMag_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_outputMag_c_write : STD_LOGIC;
    signal entry_proc_U0_outputPhase_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_outputPhase_c_write : STD_LOGIC;
    signal complexFIR_U0_ap_start : STD_LOGIC;
    signal complexFIR_U0_ap_done : STD_LOGIC;
    signal complexFIR_U0_ap_continue : STD_LOGIC;
    signal complexFIR_U0_ap_idle : STD_LOGIC;
    signal complexFIR_U0_ap_ready : STD_LOGIC;
    signal complexFIR_U0_m_axi_realIn_AWVALID : STD_LOGIC;
    signal complexFIR_U0_m_axi_realIn_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_realIn_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_realIn_WVALID : STD_LOGIC;
    signal complexFIR_U0_m_axi_realIn_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal complexFIR_U0_m_axi_realIn_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_realIn_WLAST : STD_LOGIC;
    signal complexFIR_U0_m_axi_realIn_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_realIn_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARVALID : STD_LOGIC;
    signal complexFIR_U0_m_axi_realIn_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_realIn_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_realIn_RREADY : STD_LOGIC;
    signal complexFIR_U0_m_axi_realIn_BREADY : STD_LOGIC;
    signal complexFIR_U0_m_axi_imgIn_AWVALID : STD_LOGIC;
    signal complexFIR_U0_m_axi_imgIn_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_imgIn_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_imgIn_WVALID : STD_LOGIC;
    signal complexFIR_U0_m_axi_imgIn_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal complexFIR_U0_m_axi_imgIn_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_imgIn_WLAST : STD_LOGIC;
    signal complexFIR_U0_m_axi_imgIn_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_imgIn_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARVALID : STD_LOGIC;
    signal complexFIR_U0_m_axi_imgIn_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal complexFIR_U0_m_axi_imgIn_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal complexFIR_U0_m_axi_imgIn_RREADY : STD_LOGIC;
    signal complexFIR_U0_m_axi_imgIn_BREADY : STD_LOGIC;
    signal complexFIR_U0_realStream2_din : STD_LOGIC_VECTOR (17 downto 0);
    signal complexFIR_U0_realStream2_write : STD_LOGIC;
    signal complexFIR_U0_imgStream3_din : STD_LOGIC_VECTOR (17 downto 0);
    signal complexFIR_U0_imgStream3_write : STD_LOGIC;
    signal complexFIR_U0_inputLength_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal complexFIR_U0_inputLength_c_write : STD_LOGIC;
    signal bulkCordicConvert_U0_ap_start : STD_LOGIC;
    signal bulkCordicConvert_U0_ap_done : STD_LOGIC;
    signal bulkCordicConvert_U0_ap_continue : STD_LOGIC;
    signal bulkCordicConvert_U0_ap_idle : STD_LOGIC;
    signal bulkCordicConvert_U0_ap_ready : STD_LOGIC;
    signal bulkCordicConvert_U0_realStream2_read : STD_LOGIC;
    signal bulkCordicConvert_U0_imgStream3_read : STD_LOGIC;
    signal bulkCordicConvert_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal bulkCordicConvert_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal bulkCordicConvert_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal bulkCordicConvert_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal bulkCordicConvert_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bulkCordicConvert_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal bulkCordicConvert_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal bulkCordicConvert_U0_mag_read : STD_LOGIC;
    signal bulkCordicConvert_U0_theta_read : STD_LOGIC;
    signal bulkCordicConvert_U0_convertSize_read : STD_LOGIC;
    signal outputMag_c_full_n : STD_LOGIC;
    signal outputMag_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal outputMag_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal outputMag_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal outputMag_c_empty_n : STD_LOGIC;
    signal outputPhase_c_full_n : STD_LOGIC;
    signal outputPhase_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal outputPhase_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal outputPhase_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal outputPhase_c_empty_n : STD_LOGIC;
    signal realStream_full_n : STD_LOGIC;
    signal realStream_dout : STD_LOGIC_VECTOR (17 downto 0);
    signal realStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal realStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal realStream_empty_n : STD_LOGIC;
    signal imgStream_full_n : STD_LOGIC;
    signal imgStream_dout : STD_LOGIC_VECTOR (17 downto 0);
    signal imgStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal imgStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal imgStream_empty_n : STD_LOGIC;
    signal inputLength_c_full_n : STD_LOGIC;
    signal inputLength_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputLength_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal inputLength_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal inputLength_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_complexFIR_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_complexFIR_U0_ap_ready : STD_LOGIC;
    signal start_for_bulkCordicConvert_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_bulkCordicConvert_U0_full_n : STD_LOGIC;
    signal start_for_bulkCordicConvert_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_bulkCordicConvert_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component polarFir_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        outputMag : IN STD_LOGIC_VECTOR (63 downto 0);
        outputMag_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputMag_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outputMag_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outputMag_c_full_n : IN STD_LOGIC;
        outputMag_c_write : OUT STD_LOGIC;
        outputPhase : IN STD_LOGIC_VECTOR (63 downto 0);
        outputPhase_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputPhase_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outputPhase_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outputPhase_c_full_n : IN STD_LOGIC;
        outputPhase_c_write : OUT STD_LOGIC );
    end component;


    component polarFir_complexFIR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_realIn_AWVALID : OUT STD_LOGIC;
        m_axi_realIn_AWREADY : IN STD_LOGIC;
        m_axi_realIn_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_realIn_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_realIn_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_realIn_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_realIn_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_realIn_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_realIn_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_realIn_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_realIn_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_realIn_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_WVALID : OUT STD_LOGIC;
        m_axi_realIn_WREADY : IN STD_LOGIC;
        m_axi_realIn_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_realIn_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_realIn_WLAST : OUT STD_LOGIC;
        m_axi_realIn_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_ARVALID : OUT STD_LOGIC;
        m_axi_realIn_ARREADY : IN STD_LOGIC;
        m_axi_realIn_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_realIn_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_realIn_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_realIn_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_realIn_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_realIn_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_realIn_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_realIn_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_realIn_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_realIn_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_RVALID : IN STD_LOGIC;
        m_axi_realIn_RREADY : OUT STD_LOGIC;
        m_axi_realIn_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_realIn_RLAST : IN STD_LOGIC;
        m_axi_realIn_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_realIn_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_realIn_BVALID : IN STD_LOGIC;
        m_axi_realIn_BREADY : OUT STD_LOGIC;
        m_axi_realIn_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_realIn_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_realIn_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputReal : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_imgIn_AWVALID : OUT STD_LOGIC;
        m_axi_imgIn_AWREADY : IN STD_LOGIC;
        m_axi_imgIn_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_imgIn_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_imgIn_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_imgIn_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imgIn_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imgIn_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imgIn_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_imgIn_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imgIn_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imgIn_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_WVALID : OUT STD_LOGIC;
        m_axi_imgIn_WREADY : IN STD_LOGIC;
        m_axi_imgIn_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_imgIn_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imgIn_WLAST : OUT STD_LOGIC;
        m_axi_imgIn_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_ARVALID : OUT STD_LOGIC;
        m_axi_imgIn_ARREADY : IN STD_LOGIC;
        m_axi_imgIn_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_imgIn_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_imgIn_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_imgIn_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imgIn_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imgIn_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imgIn_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_imgIn_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imgIn_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_imgIn_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_RVALID : IN STD_LOGIC;
        m_axi_imgIn_RREADY : OUT STD_LOGIC;
        m_axi_imgIn_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_imgIn_RLAST : IN STD_LOGIC;
        m_axi_imgIn_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_imgIn_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imgIn_BVALID : IN STD_LOGIC;
        m_axi_imgIn_BREADY : OUT STD_LOGIC;
        m_axi_imgIn_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_imgIn_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_imgIn_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputImg : IN STD_LOGIC_VECTOR (63 downto 0);
        realStream2_din : OUT STD_LOGIC_VECTOR (17 downto 0);
        realStream2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        realStream2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        realStream2_full_n : IN STD_LOGIC;
        realStream2_write : OUT STD_LOGIC;
        imgStream3_din : OUT STD_LOGIC_VECTOR (17 downto 0);
        imgStream3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        imgStream3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        imgStream3_full_n : IN STD_LOGIC;
        imgStream3_write : OUT STD_LOGIC;
        filterLength : IN STD_LOGIC_VECTOR (31 downto 0);
        inputLength_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputLength_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inputLength_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inputLength_c_full_n : IN STD_LOGIC;
        inputLength_c_write : OUT STD_LOGIC );
    end component;


    component polarFir_bulkCordicConvert IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        realStream2_dout : IN STD_LOGIC_VECTOR (17 downto 0);
        realStream2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        realStream2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        realStream2_empty_n : IN STD_LOGIC;
        realStream2_read : OUT STD_LOGIC;
        imgStream3_dout : IN STD_LOGIC_VECTOR (17 downto 0);
        imgStream3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        imgStream3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        imgStream3_empty_n : IN STD_LOGIC;
        imgStream3_read : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mag_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        mag_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        mag_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        mag_empty_n : IN STD_LOGIC;
        mag_read : OUT STD_LOGIC;
        theta_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        theta_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        theta_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        theta_empty_n : IN STD_LOGIC;
        theta_read : OUT STD_LOGIC;
        convertSize_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        convertSize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        convertSize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        convertSize_empty_n : IN STD_LOGIC;
        convertSize_read : OUT STD_LOGIC );
    end component;


    component polarFir_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component polarFir_fifo_w18_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (17 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (17 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component polarFir_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component polarFir_start_for_bulkCordicConvert_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component polarFir_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        inputReal : OUT STD_LOGIC_VECTOR (63 downto 0);
        inputImg : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputMag : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputPhase : OUT STD_LOGIC_VECTOR (63 downto 0);
        inputLength : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component polarFir_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component polarFir_imgIn_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component polarFir_realIn_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component polarFir_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        inputReal => inputReal,
        inputImg => inputImg,
        outputMag => outputMag,
        outputPhase => outputPhase,
        inputLength => inputLength,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component polarFir_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => bulkCordicConvert_U0_m_axi_gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => bulkCordicConvert_U0_m_axi_gmem_AWADDR,
        I_AWLEN => bulkCordicConvert_U0_m_axi_gmem_AWLEN,
        I_WVALID => bulkCordicConvert_U0_m_axi_gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => bulkCordicConvert_U0_m_axi_gmem_WDATA,
        I_WSTRB => bulkCordicConvert_U0_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => bulkCordicConvert_U0_m_axi_gmem_BREADY);

    imgIn_m_axi_U : component polarFir_imgIn_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMGIN_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMGIN_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMGIN_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMGIN_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMGIN_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMGIN_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMGIN_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMGIN_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMGIN_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMGIN_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMGIN_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_imgIn_AWVALID,
        AWREADY => m_axi_imgIn_AWREADY,
        AWADDR => m_axi_imgIn_AWADDR,
        AWID => m_axi_imgIn_AWID,
        AWLEN => m_axi_imgIn_AWLEN,
        AWSIZE => m_axi_imgIn_AWSIZE,
        AWBURST => m_axi_imgIn_AWBURST,
        AWLOCK => m_axi_imgIn_AWLOCK,
        AWCACHE => m_axi_imgIn_AWCACHE,
        AWPROT => m_axi_imgIn_AWPROT,
        AWQOS => m_axi_imgIn_AWQOS,
        AWREGION => m_axi_imgIn_AWREGION,
        AWUSER => m_axi_imgIn_AWUSER,
        WVALID => m_axi_imgIn_WVALID,
        WREADY => m_axi_imgIn_WREADY,
        WDATA => m_axi_imgIn_WDATA,
        WSTRB => m_axi_imgIn_WSTRB,
        WLAST => m_axi_imgIn_WLAST,
        WID => m_axi_imgIn_WID,
        WUSER => m_axi_imgIn_WUSER,
        ARVALID => m_axi_imgIn_ARVALID,
        ARREADY => m_axi_imgIn_ARREADY,
        ARADDR => m_axi_imgIn_ARADDR,
        ARID => m_axi_imgIn_ARID,
        ARLEN => m_axi_imgIn_ARLEN,
        ARSIZE => m_axi_imgIn_ARSIZE,
        ARBURST => m_axi_imgIn_ARBURST,
        ARLOCK => m_axi_imgIn_ARLOCK,
        ARCACHE => m_axi_imgIn_ARCACHE,
        ARPROT => m_axi_imgIn_ARPROT,
        ARQOS => m_axi_imgIn_ARQOS,
        ARREGION => m_axi_imgIn_ARREGION,
        ARUSER => m_axi_imgIn_ARUSER,
        RVALID => m_axi_imgIn_RVALID,
        RREADY => m_axi_imgIn_RREADY,
        RDATA => m_axi_imgIn_RDATA,
        RLAST => m_axi_imgIn_RLAST,
        RID => m_axi_imgIn_RID,
        RUSER => m_axi_imgIn_RUSER,
        RRESP => m_axi_imgIn_RRESP,
        BVALID => m_axi_imgIn_BVALID,
        BREADY => m_axi_imgIn_BREADY,
        BRESP => m_axi_imgIn_BRESP,
        BID => m_axi_imgIn_BID,
        BUSER => m_axi_imgIn_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => complexFIR_U0_m_axi_imgIn_ARVALID,
        I_ARREADY => imgIn_ARREADY,
        I_ARADDR => complexFIR_U0_m_axi_imgIn_ARADDR,
        I_ARLEN => complexFIR_U0_m_axi_imgIn_ARLEN,
        I_RVALID => imgIn_RVALID,
        I_RREADY => complexFIR_U0_m_axi_imgIn_RREADY,
        I_RDATA => imgIn_RDATA,
        I_RFIFONUM => imgIn_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => imgIn_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => imgIn_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => imgIn_BVALID,
        I_BREADY => ap_const_logic_0);

    realIn_m_axi_U : component polarFir_realIn_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_REALIN_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_REALIN_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_REALIN_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_REALIN_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_REALIN_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_REALIN_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_REALIN_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_REALIN_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_REALIN_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_REALIN_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_REALIN_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_realIn_AWVALID,
        AWREADY => m_axi_realIn_AWREADY,
        AWADDR => m_axi_realIn_AWADDR,
        AWID => m_axi_realIn_AWID,
        AWLEN => m_axi_realIn_AWLEN,
        AWSIZE => m_axi_realIn_AWSIZE,
        AWBURST => m_axi_realIn_AWBURST,
        AWLOCK => m_axi_realIn_AWLOCK,
        AWCACHE => m_axi_realIn_AWCACHE,
        AWPROT => m_axi_realIn_AWPROT,
        AWQOS => m_axi_realIn_AWQOS,
        AWREGION => m_axi_realIn_AWREGION,
        AWUSER => m_axi_realIn_AWUSER,
        WVALID => m_axi_realIn_WVALID,
        WREADY => m_axi_realIn_WREADY,
        WDATA => m_axi_realIn_WDATA,
        WSTRB => m_axi_realIn_WSTRB,
        WLAST => m_axi_realIn_WLAST,
        WID => m_axi_realIn_WID,
        WUSER => m_axi_realIn_WUSER,
        ARVALID => m_axi_realIn_ARVALID,
        ARREADY => m_axi_realIn_ARREADY,
        ARADDR => m_axi_realIn_ARADDR,
        ARID => m_axi_realIn_ARID,
        ARLEN => m_axi_realIn_ARLEN,
        ARSIZE => m_axi_realIn_ARSIZE,
        ARBURST => m_axi_realIn_ARBURST,
        ARLOCK => m_axi_realIn_ARLOCK,
        ARCACHE => m_axi_realIn_ARCACHE,
        ARPROT => m_axi_realIn_ARPROT,
        ARQOS => m_axi_realIn_ARQOS,
        ARREGION => m_axi_realIn_ARREGION,
        ARUSER => m_axi_realIn_ARUSER,
        RVALID => m_axi_realIn_RVALID,
        RREADY => m_axi_realIn_RREADY,
        RDATA => m_axi_realIn_RDATA,
        RLAST => m_axi_realIn_RLAST,
        RID => m_axi_realIn_RID,
        RUSER => m_axi_realIn_RUSER,
        RRESP => m_axi_realIn_RRESP,
        BVALID => m_axi_realIn_BVALID,
        BREADY => m_axi_realIn_BREADY,
        BRESP => m_axi_realIn_BRESP,
        BID => m_axi_realIn_BID,
        BUSER => m_axi_realIn_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => complexFIR_U0_m_axi_realIn_ARVALID,
        I_ARREADY => realIn_ARREADY,
        I_ARADDR => complexFIR_U0_m_axi_realIn_ARADDR,
        I_ARLEN => complexFIR_U0_m_axi_realIn_ARLEN,
        I_RVALID => realIn_RVALID,
        I_RREADY => complexFIR_U0_m_axi_realIn_RREADY,
        I_RDATA => realIn_RDATA,
        I_RFIFONUM => realIn_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => realIn_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => realIn_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => realIn_BVALID,
        I_BREADY => ap_const_logic_0);

    entry_proc_U0 : component polarFir_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_bulkCordicConvert_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        outputMag => outputMag,
        outputMag_c_din => entry_proc_U0_outputMag_c_din,
        outputMag_c_num_data_valid => outputMag_c_num_data_valid,
        outputMag_c_fifo_cap => outputMag_c_fifo_cap,
        outputMag_c_full_n => outputMag_c_full_n,
        outputMag_c_write => entry_proc_U0_outputMag_c_write,
        outputPhase => outputPhase,
        outputPhase_c_din => entry_proc_U0_outputPhase_c_din,
        outputPhase_c_num_data_valid => outputPhase_c_num_data_valid,
        outputPhase_c_fifo_cap => outputPhase_c_fifo_cap,
        outputPhase_c_full_n => outputPhase_c_full_n,
        outputPhase_c_write => entry_proc_U0_outputPhase_c_write);

    complexFIR_U0 : component polarFir_complexFIR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => complexFIR_U0_ap_start,
        ap_done => complexFIR_U0_ap_done,
        ap_continue => complexFIR_U0_ap_continue,
        ap_idle => complexFIR_U0_ap_idle,
        ap_ready => complexFIR_U0_ap_ready,
        m_axi_realIn_AWVALID => complexFIR_U0_m_axi_realIn_AWVALID,
        m_axi_realIn_AWREADY => ap_const_logic_0,
        m_axi_realIn_AWADDR => complexFIR_U0_m_axi_realIn_AWADDR,
        m_axi_realIn_AWID => complexFIR_U0_m_axi_realIn_AWID,
        m_axi_realIn_AWLEN => complexFIR_U0_m_axi_realIn_AWLEN,
        m_axi_realIn_AWSIZE => complexFIR_U0_m_axi_realIn_AWSIZE,
        m_axi_realIn_AWBURST => complexFIR_U0_m_axi_realIn_AWBURST,
        m_axi_realIn_AWLOCK => complexFIR_U0_m_axi_realIn_AWLOCK,
        m_axi_realIn_AWCACHE => complexFIR_U0_m_axi_realIn_AWCACHE,
        m_axi_realIn_AWPROT => complexFIR_U0_m_axi_realIn_AWPROT,
        m_axi_realIn_AWQOS => complexFIR_U0_m_axi_realIn_AWQOS,
        m_axi_realIn_AWREGION => complexFIR_U0_m_axi_realIn_AWREGION,
        m_axi_realIn_AWUSER => complexFIR_U0_m_axi_realIn_AWUSER,
        m_axi_realIn_WVALID => complexFIR_U0_m_axi_realIn_WVALID,
        m_axi_realIn_WREADY => ap_const_logic_0,
        m_axi_realIn_WDATA => complexFIR_U0_m_axi_realIn_WDATA,
        m_axi_realIn_WSTRB => complexFIR_U0_m_axi_realIn_WSTRB,
        m_axi_realIn_WLAST => complexFIR_U0_m_axi_realIn_WLAST,
        m_axi_realIn_WID => complexFIR_U0_m_axi_realIn_WID,
        m_axi_realIn_WUSER => complexFIR_U0_m_axi_realIn_WUSER,
        m_axi_realIn_ARVALID => complexFIR_U0_m_axi_realIn_ARVALID,
        m_axi_realIn_ARREADY => realIn_ARREADY,
        m_axi_realIn_ARADDR => complexFIR_U0_m_axi_realIn_ARADDR,
        m_axi_realIn_ARID => complexFIR_U0_m_axi_realIn_ARID,
        m_axi_realIn_ARLEN => complexFIR_U0_m_axi_realIn_ARLEN,
        m_axi_realIn_ARSIZE => complexFIR_U0_m_axi_realIn_ARSIZE,
        m_axi_realIn_ARBURST => complexFIR_U0_m_axi_realIn_ARBURST,
        m_axi_realIn_ARLOCK => complexFIR_U0_m_axi_realIn_ARLOCK,
        m_axi_realIn_ARCACHE => complexFIR_U0_m_axi_realIn_ARCACHE,
        m_axi_realIn_ARPROT => complexFIR_U0_m_axi_realIn_ARPROT,
        m_axi_realIn_ARQOS => complexFIR_U0_m_axi_realIn_ARQOS,
        m_axi_realIn_ARREGION => complexFIR_U0_m_axi_realIn_ARREGION,
        m_axi_realIn_ARUSER => complexFIR_U0_m_axi_realIn_ARUSER,
        m_axi_realIn_RVALID => realIn_RVALID,
        m_axi_realIn_RREADY => complexFIR_U0_m_axi_realIn_RREADY,
        m_axi_realIn_RDATA => realIn_RDATA,
        m_axi_realIn_RLAST => realIn_RLAST,
        m_axi_realIn_RID => realIn_RID,
        m_axi_realIn_RFIFONUM => realIn_RFIFONUM,
        m_axi_realIn_RUSER => realIn_RUSER,
        m_axi_realIn_RRESP => realIn_RRESP,
        m_axi_realIn_BVALID => ap_const_logic_0,
        m_axi_realIn_BREADY => complexFIR_U0_m_axi_realIn_BREADY,
        m_axi_realIn_BRESP => ap_const_lv2_0,
        m_axi_realIn_BID => ap_const_lv1_0,
        m_axi_realIn_BUSER => ap_const_lv1_0,
        inputReal => inputReal,
        m_axi_imgIn_AWVALID => complexFIR_U0_m_axi_imgIn_AWVALID,
        m_axi_imgIn_AWREADY => ap_const_logic_0,
        m_axi_imgIn_AWADDR => complexFIR_U0_m_axi_imgIn_AWADDR,
        m_axi_imgIn_AWID => complexFIR_U0_m_axi_imgIn_AWID,
        m_axi_imgIn_AWLEN => complexFIR_U0_m_axi_imgIn_AWLEN,
        m_axi_imgIn_AWSIZE => complexFIR_U0_m_axi_imgIn_AWSIZE,
        m_axi_imgIn_AWBURST => complexFIR_U0_m_axi_imgIn_AWBURST,
        m_axi_imgIn_AWLOCK => complexFIR_U0_m_axi_imgIn_AWLOCK,
        m_axi_imgIn_AWCACHE => complexFIR_U0_m_axi_imgIn_AWCACHE,
        m_axi_imgIn_AWPROT => complexFIR_U0_m_axi_imgIn_AWPROT,
        m_axi_imgIn_AWQOS => complexFIR_U0_m_axi_imgIn_AWQOS,
        m_axi_imgIn_AWREGION => complexFIR_U0_m_axi_imgIn_AWREGION,
        m_axi_imgIn_AWUSER => complexFIR_U0_m_axi_imgIn_AWUSER,
        m_axi_imgIn_WVALID => complexFIR_U0_m_axi_imgIn_WVALID,
        m_axi_imgIn_WREADY => ap_const_logic_0,
        m_axi_imgIn_WDATA => complexFIR_U0_m_axi_imgIn_WDATA,
        m_axi_imgIn_WSTRB => complexFIR_U0_m_axi_imgIn_WSTRB,
        m_axi_imgIn_WLAST => complexFIR_U0_m_axi_imgIn_WLAST,
        m_axi_imgIn_WID => complexFIR_U0_m_axi_imgIn_WID,
        m_axi_imgIn_WUSER => complexFIR_U0_m_axi_imgIn_WUSER,
        m_axi_imgIn_ARVALID => complexFIR_U0_m_axi_imgIn_ARVALID,
        m_axi_imgIn_ARREADY => imgIn_ARREADY,
        m_axi_imgIn_ARADDR => complexFIR_U0_m_axi_imgIn_ARADDR,
        m_axi_imgIn_ARID => complexFIR_U0_m_axi_imgIn_ARID,
        m_axi_imgIn_ARLEN => complexFIR_U0_m_axi_imgIn_ARLEN,
        m_axi_imgIn_ARSIZE => complexFIR_U0_m_axi_imgIn_ARSIZE,
        m_axi_imgIn_ARBURST => complexFIR_U0_m_axi_imgIn_ARBURST,
        m_axi_imgIn_ARLOCK => complexFIR_U0_m_axi_imgIn_ARLOCK,
        m_axi_imgIn_ARCACHE => complexFIR_U0_m_axi_imgIn_ARCACHE,
        m_axi_imgIn_ARPROT => complexFIR_U0_m_axi_imgIn_ARPROT,
        m_axi_imgIn_ARQOS => complexFIR_U0_m_axi_imgIn_ARQOS,
        m_axi_imgIn_ARREGION => complexFIR_U0_m_axi_imgIn_ARREGION,
        m_axi_imgIn_ARUSER => complexFIR_U0_m_axi_imgIn_ARUSER,
        m_axi_imgIn_RVALID => imgIn_RVALID,
        m_axi_imgIn_RREADY => complexFIR_U0_m_axi_imgIn_RREADY,
        m_axi_imgIn_RDATA => imgIn_RDATA,
        m_axi_imgIn_RLAST => imgIn_RLAST,
        m_axi_imgIn_RID => imgIn_RID,
        m_axi_imgIn_RFIFONUM => imgIn_RFIFONUM,
        m_axi_imgIn_RUSER => imgIn_RUSER,
        m_axi_imgIn_RRESP => imgIn_RRESP,
        m_axi_imgIn_BVALID => ap_const_logic_0,
        m_axi_imgIn_BREADY => complexFIR_U0_m_axi_imgIn_BREADY,
        m_axi_imgIn_BRESP => ap_const_lv2_0,
        m_axi_imgIn_BID => ap_const_lv1_0,
        m_axi_imgIn_BUSER => ap_const_lv1_0,
        inputImg => inputImg,
        realStream2_din => complexFIR_U0_realStream2_din,
        realStream2_num_data_valid => realStream_num_data_valid,
        realStream2_fifo_cap => realStream_fifo_cap,
        realStream2_full_n => realStream_full_n,
        realStream2_write => complexFIR_U0_realStream2_write,
        imgStream3_din => complexFIR_U0_imgStream3_din,
        imgStream3_num_data_valid => imgStream_num_data_valid,
        imgStream3_fifo_cap => imgStream_fifo_cap,
        imgStream3_full_n => imgStream_full_n,
        imgStream3_write => complexFIR_U0_imgStream3_write,
        filterLength => inputLength,
        inputLength_c_din => complexFIR_U0_inputLength_c_din,
        inputLength_c_num_data_valid => inputLength_c_num_data_valid,
        inputLength_c_fifo_cap => inputLength_c_fifo_cap,
        inputLength_c_full_n => inputLength_c_full_n,
        inputLength_c_write => complexFIR_U0_inputLength_c_write);

    bulkCordicConvert_U0 : component polarFir_bulkCordicConvert
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => bulkCordicConvert_U0_ap_start,
        ap_done => bulkCordicConvert_U0_ap_done,
        ap_continue => bulkCordicConvert_U0_ap_continue,
        ap_idle => bulkCordicConvert_U0_ap_idle,
        ap_ready => bulkCordicConvert_U0_ap_ready,
        realStream2_dout => realStream_dout,
        realStream2_num_data_valid => realStream_num_data_valid,
        realStream2_fifo_cap => realStream_fifo_cap,
        realStream2_empty_n => realStream_empty_n,
        realStream2_read => bulkCordicConvert_U0_realStream2_read,
        imgStream3_dout => imgStream_dout,
        imgStream3_num_data_valid => imgStream_num_data_valid,
        imgStream3_fifo_cap => imgStream_fifo_cap,
        imgStream3_empty_n => imgStream_empty_n,
        imgStream3_read => bulkCordicConvert_U0_imgStream3_read,
        m_axi_gmem_AWVALID => bulkCordicConvert_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => bulkCordicConvert_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => bulkCordicConvert_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => bulkCordicConvert_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => bulkCordicConvert_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => bulkCordicConvert_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => bulkCordicConvert_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => bulkCordicConvert_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => bulkCordicConvert_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => bulkCordicConvert_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => bulkCordicConvert_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => bulkCordicConvert_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => bulkCordicConvert_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => bulkCordicConvert_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => bulkCordicConvert_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => bulkCordicConvert_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => bulkCordicConvert_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => bulkCordicConvert_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => bulkCordicConvert_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => bulkCordicConvert_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => bulkCordicConvert_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => bulkCordicConvert_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => bulkCordicConvert_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => bulkCordicConvert_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => bulkCordicConvert_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => bulkCordicConvert_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => bulkCordicConvert_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => bulkCordicConvert_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => bulkCordicConvert_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => bulkCordicConvert_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => bulkCordicConvert_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => bulkCordicConvert_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        mag_dout => outputMag_c_dout,
        mag_num_data_valid => outputMag_c_num_data_valid,
        mag_fifo_cap => outputMag_c_fifo_cap,
        mag_empty_n => outputMag_c_empty_n,
        mag_read => bulkCordicConvert_U0_mag_read,
        theta_dout => outputPhase_c_dout,
        theta_num_data_valid => outputPhase_c_num_data_valid,
        theta_fifo_cap => outputPhase_c_fifo_cap,
        theta_empty_n => outputPhase_c_empty_n,
        theta_read => bulkCordicConvert_U0_theta_read,
        convertSize_dout => inputLength_c_dout,
        convertSize_num_data_valid => inputLength_c_num_data_valid,
        convertSize_fifo_cap => inputLength_c_fifo_cap,
        convertSize_empty_n => inputLength_c_empty_n,
        convertSize_read => bulkCordicConvert_U0_convertSize_read);

    outputMag_c_U : component polarFir_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_outputMag_c_din,
        if_full_n => outputMag_c_full_n,
        if_write => entry_proc_U0_outputMag_c_write,
        if_dout => outputMag_c_dout,
        if_num_data_valid => outputMag_c_num_data_valid,
        if_fifo_cap => outputMag_c_fifo_cap,
        if_empty_n => outputMag_c_empty_n,
        if_read => bulkCordicConvert_U0_mag_read);

    outputPhase_c_U : component polarFir_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_outputPhase_c_din,
        if_full_n => outputPhase_c_full_n,
        if_write => entry_proc_U0_outputPhase_c_write,
        if_dout => outputPhase_c_dout,
        if_num_data_valid => outputPhase_c_num_data_valid,
        if_fifo_cap => outputPhase_c_fifo_cap,
        if_empty_n => outputPhase_c_empty_n,
        if_read => bulkCordicConvert_U0_theta_read);

    realStream_U : component polarFir_fifo_w18_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => complexFIR_U0_realStream2_din,
        if_full_n => realStream_full_n,
        if_write => complexFIR_U0_realStream2_write,
        if_dout => realStream_dout,
        if_num_data_valid => realStream_num_data_valid,
        if_fifo_cap => realStream_fifo_cap,
        if_empty_n => realStream_empty_n,
        if_read => bulkCordicConvert_U0_realStream2_read);

    imgStream_U : component polarFir_fifo_w18_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => complexFIR_U0_imgStream3_din,
        if_full_n => imgStream_full_n,
        if_write => complexFIR_U0_imgStream3_write,
        if_dout => imgStream_dout,
        if_num_data_valid => imgStream_num_data_valid,
        if_fifo_cap => imgStream_fifo_cap,
        if_empty_n => imgStream_empty_n,
        if_read => bulkCordicConvert_U0_imgStream3_read);

    inputLength_c_U : component polarFir_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => complexFIR_U0_inputLength_c_din,
        if_full_n => inputLength_c_full_n,
        if_write => complexFIR_U0_inputLength_c_write,
        if_dout => inputLength_c_dout,
        if_num_data_valid => inputLength_c_num_data_valid,
        if_fifo_cap => inputLength_c_fifo_cap,
        if_empty_n => inputLength_c_empty_n,
        if_read => bulkCordicConvert_U0_convertSize_read);

    start_for_bulkCordicConvert_U0_U : component polarFir_start_for_bulkCordicConvert_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_bulkCordicConvert_U0_din,
        if_full_n => start_for_bulkCordicConvert_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_bulkCordicConvert_U0_dout,
        if_empty_n => start_for_bulkCordicConvert_U0_empty_n,
        if_read => bulkCordicConvert_U0_ap_ready);





    ap_sync_reg_complexFIR_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_complexFIR_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_complexFIR_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_complexFIR_U0_ap_ready <= ap_sync_complexFIR_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= bulkCordicConvert_U0_ap_done;
    ap_idle <= (entry_proc_U0_ap_idle and complexFIR_U0_ap_idle and bulkCordicConvert_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_complexFIR_U0_ap_ready <= (complexFIR_U0_ap_ready or ap_sync_reg_complexFIR_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_complexFIR_U0_ap_ready);
    bulkCordicConvert_U0_ap_continue <= ap_const_logic_1;
    bulkCordicConvert_U0_ap_start <= start_for_bulkCordicConvert_U0_empty_n;
    complexFIR_U0_ap_continue <= ap_const_logic_1;
    complexFIR_U0_ap_start <= ((ap_sync_reg_complexFIR_U0_ap_ready xor ap_const_logic_1) and ap_start);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    gmem_BID <= ap_const_lv1_0;
    gmem_BRESP <= ap_const_lv2_0;
    gmem_BUSER <= ap_const_lv1_0;
    imgIn_RID <= ap_const_lv1_0;
    imgIn_RLAST <= ap_const_logic_0;
    imgIn_RRESP <= ap_const_lv2_0;
    imgIn_RUSER <= ap_const_lv1_0;
    realIn_RID <= ap_const_lv1_0;
    realIn_RLAST <= ap_const_logic_0;
    realIn_RRESP <= ap_const_lv2_0;
    realIn_RUSER <= ap_const_lv1_0;
    start_for_bulkCordicConvert_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
