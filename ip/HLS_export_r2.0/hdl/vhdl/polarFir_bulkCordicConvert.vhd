-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polarFir_bulkCordicConvert is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    realStream2_dout : IN STD_LOGIC_VECTOR (17 downto 0);
    realStream2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    realStream2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    realStream2_empty_n : IN STD_LOGIC;
    realStream2_read : OUT STD_LOGIC;
    imgStream3_dout : IN STD_LOGIC_VECTOR (17 downto 0);
    imgStream3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    imgStream3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    imgStream3_empty_n : IN STD_LOGIC;
    imgStream3_read : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mag_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    mag_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    mag_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    mag_empty_n : IN STD_LOGIC;
    mag_read : OUT STD_LOGIC;
    theta_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    theta_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    theta_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    theta_empty_n : IN STD_LOGIC;
    theta_read : OUT STD_LOGIC;
    convertSize_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    convertSize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    convertSize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    convertSize_empty_n : IN STD_LOGIC;
    convertSize_read : OUT STD_LOGIC );
end;


architecture behav of polarFir_bulkCordicConvert is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv14_1921 : STD_LOGIC_VECTOR (13 downto 0) := "01100100100001";
    constant ap_const_lv14_26DF : STD_LOGIC_VECTOR (13 downto 0) := "10011011011111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_FFFFE8 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv36_9B7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100110110111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal realStream2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln25_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgStream3_blk_n : STD_LOGIC;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal mag_blk_n : STD_LOGIC;
    signal theta_blk_n : STD_LOGIC;
    signal convertSize_blk_n : STD_LOGIC;
    signal convertSize_read_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln25_fu_245_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln25_reg_1101 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln25_1_fu_259_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln25_1_reg_1106 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln838_fu_290_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln838_reg_1114 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln838_1_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln838_1_reg_1119 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_1129 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_1135 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_fu_416_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln68_reg_1141 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln68_1_fu_425_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln68_1_reg_1146 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln68_3_fu_448_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln68_3_reg_1151 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln1090_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_487_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_4_reg_1171 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1099_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1099_reg_1178 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1099_fu_531_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1099_reg_1185 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1102_fu_535_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1102_reg_1190 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1098_fu_539_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1098_reg_1195 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_634_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_1200 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln1113_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1113_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_9_reg_1210 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Result_5_reg_1215 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentCos_V_7_reg_1220 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal select_ln1090_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_reg_1232 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_1_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_1_reg_1238 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_5_fu_792_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_5_reg_1243 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1099_1_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1099_1_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1099_1_fu_834_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1099_1_reg_1257 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1102_1_fu_838_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1102_1_reg_1262 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1098_1_fu_842_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1098_1_reg_1267 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1104_1_fu_937_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln1104_1_reg_1272 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln1113_1_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1113_1_reg_1277 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_10_reg_1282 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Result_12_reg_1287 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1090_1_fu_1062_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_1_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start : STD_LOGIC;
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done : STD_LOGIC;
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_idle : STD_LOGIC;
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_ready : STD_LOGIC;
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out_ap_vld : STD_LOGIC;
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out_ap_vld : STD_LOGIC;
    signal grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln35_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_150 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_fu_280_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_fu_235_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln25_1_fu_249_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln25_1_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_fu_286_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln35_fu_306_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln36_fu_321_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sinFixed_V_fu_348_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln1649_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentSin_V_4_fu_341_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln86_fu_372_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentCos_V_fu_386_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln68_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal swapTemp_V_1_fu_366_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln86_1_fu_408_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln86_fu_400_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_392_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln68_2_fu_434_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_481_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_s_fu_495_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_15_fu_505_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1198_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_517_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_548_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1102_fu_564_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1102_fu_569_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1102_fu_573_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_4_fu_579_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln1101_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1102_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1104_fu_610_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_3_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1104_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1104_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1104_2_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1113_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1112_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1113_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1114_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1114_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1113_fu_660_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1114_fu_675_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_681_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_691_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1069_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln1119_fu_734_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1098_fu_727_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1124_fu_739_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1117_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_745_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_16_fu_752_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_2_fu_787_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_8_fu_798_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_18_fu_808_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1198_1_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_820_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_851_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1102_1_fu_867_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1102_1_fu_872_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1102_1_fu_876_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_10_fu_882_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln1101_1_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1102_1_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_899_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1104_1_fu_913_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_11_fu_918_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1104_1_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1104_1_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1104_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1113_1_fu_954_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1112_1_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1113_1_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1114_1_fu_969_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1114_1_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1113_1_fu_963_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1114_1_fu_978_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_984_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_1_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_994_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1119_1_fu_1028_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1098_1_fu_1021_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1124_1_fu_1033_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1117_1_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1039_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_19_fu_1046_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_1_fu_1058_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1069_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component polarFir_bulkCordicConvert_Pipeline_ROTATOR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        select_ln68 : IN STD_LOGIC_VECTOR (23 downto 0);
        select_ln68_1 : IN STD_LOGIC_VECTOR (23 downto 0);
        sext_ln113 : IN STD_LOGIC_VECTOR (13 downto 0);
        currentCos_V_out : OUT STD_LOGIC_VECTOR (23 downto 0);
        currentCos_V_out_ap_vld : OUT STD_LOGIC;
        p_out : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_out_ap_vld : OUT STD_LOGIC );
    end component;


    component polarFir_mul_mul_24s_12ns_36_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224 : component polarFir_bulkCordicConvert_Pipeline_ROTATOR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start,
        ap_done => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done,
        ap_idle => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_idle,
        ap_ready => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_ready,
        select_ln68 => select_ln68_reg_1141,
        select_ln68_1 => select_ln68_1_reg_1146,
        sext_ln113 => select_ln68_3_reg_1151,
        currentCos_V_out => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out,
        currentCos_V_out_ap_vld => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out_ap_vld,
        p_out => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out,
        p_out_ap_vld => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out_ap_vld);

    mul_mul_24s_12ns_36_4_1_U83 : component polarFir_mul_mul_24s_12ns_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out,
        din1 => grp_fu_1069_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1069_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg <= ap_const_logic_0;
            else
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_ready = ap_const_logic_1)) then 
                    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (convertSize_empty_n = ap_const_logic_0) or (theta_empty_n = ap_const_logic_0) or (mag_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_150 <= ap_const_lv31_0;
            elsif ((not((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1))) then 
                i_fu_150 <= add_ln25_fu_280_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                convertSize_read_reg_1096 <= convertSize_dout;
                sext_ln25_1_reg_1106 <= sext_ln25_1_fu_259_p1;
                sext_ln25_reg_1101 <= sext_ln25_fu_245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                currentCos_V_7_reg_1220 <= grp_fu_1069_p2(35 downto 12);
                p_Result_17_reg_1232 <= grp_fu_1069_p2(35 downto 35);
                select_ln1090_reg_1227 <= select_ln1090_fu_768_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1))) then
                gmem_addr_1_reg_1135 <= sext_ln36_fu_326_p1;
                gmem_addr_reg_1129 <= sext_ln35_fu_311_p1;
                tmp_2_reg_1124 <= realStream2_dout(11 downto 11);
                trunc_ln838_1_reg_1119 <= trunc_ln838_1_fu_294_p1;
                trunc_ln838_reg_1114 <= trunc_ln838_fu_290_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln1090_1_reg_1238 <= icmp_ln1090_1_fu_782_p2;
                sub_ln1099_1_reg_1250 <= sub_ln1099_1_fu_828_p2;
                tmp_V_5_reg_1243 <= tmp_V_5_fu_792_p3;
                trunc_ln1098_1_reg_1267 <= trunc_ln1098_1_fu_842_p1;
                trunc_ln1099_1_reg_1257 <= trunc_ln1099_1_fu_834_p1;
                trunc_ln1102_1_reg_1262 <= trunc_ln1102_1_fu_838_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln1090_reg_1161 <= icmp_ln1090_fu_467_p2;
                p_Result_14_reg_1166 <= grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out(23 downto 23);
                sub_ln1099_reg_1178 <= sub_ln1099_fu_525_p2;
                tmp_V_4_reg_1171 <= tmp_V_4_fu_487_p3;
                trunc_ln1098_reg_1195 <= trunc_ln1098_fu_539_p1;
                trunc_ln1099_reg_1185 <= trunc_ln1099_fu_531_p1;
                trunc_ln1102_reg_1190 <= trunc_ln1102_fu_535_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1090_1_reg_1238 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln1113_1_reg_1277 <= icmp_ln1113_1_fu_945_p2;
                    or_ln1104_1_reg_1272(0) <= or_ln1104_1_fu_937_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1090_reg_1161 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln1113_reg_1205 <= icmp_ln1113_fu_642_p2;
                    or_ln_reg_1200(0) <= or_ln_fu_634_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1090_1_reg_1238 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                m_10_reg_1282 <= m_8_fu_994_p2(63 downto 1);
                p_Result_12_reg_1287 <= m_8_fu_994_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1090_reg_1161 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                m_9_reg_1210 <= m_3_fu_691_p2(63 downto 1);
                p_Result_5_reg_1215 <= m_3_fu_691_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                select_ln1090_1_reg_1292 <= select_ln1090_1_fu_1062_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    select_ln68_1_reg_1146(23 downto 12) <= select_ln68_1_fu_425_p3(23 downto 12);
                select_ln68_3_reg_1151 <= select_ln68_3_fu_448_p3;
                    select_ln68_reg_1141(23 downto 12) <= select_ln68_fu_416_p3(23 downto 12);
            end if;
        end if;
    end process;
    select_ln68_reg_1141(11 downto 0) <= "000000000000";
    select_ln68_1_reg_1146(11 downto 0) <= "000000000000";
    or_ln_reg_1200(1) <= '0';
    or_ln1104_1_reg_1272(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, realStream2_empty_n, imgStream3_empty_n, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_BVALID, mag_empty_n, theta_empty_n, convertSize_empty_n, ap_CS_fsm_state2, icmp_ln25_fu_275_p2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state18, grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (convertSize_empty_n = ap_const_logic_0) or (theta_empty_n = ap_const_logic_0) or (mag_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LD_1_fu_1058_p1 <= p_Result_19_fu_1046_p5(32 - 1 downto 0);
    LD_fu_764_p1 <= p_Result_16_fu_752_p5(32 - 1 downto 0);
    a_1_fu_893_p2 <= (icmp_ln1102_1_fu_887_p2 and icmp_ln1101_1_fu_861_p2);
    a_fu_590_p2 <= (icmp_ln1102_fu_584_p2 and icmp_ln1101_fu_558_p2);
    add_ln1104_1_fu_913_p2 <= std_logic_vector(unsigned(trunc_ln1099_1_reg_1257) + unsigned(ap_const_lv24_FFFFE8));
    add_ln1104_fu_610_p2 <= std_logic_vector(unsigned(trunc_ln1099_reg_1185) + unsigned(ap_const_lv24_FFFFE8));
    add_ln1113_1_fu_954_p2 <= std_logic_vector(unsigned(sub_ln1099_1_reg_1250) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1113_fu_651_p2 <= std_logic_vector(unsigned(sub_ln1099_reg_1178) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1124_1_fu_1033_p2 <= std_logic_vector(unsigned(sub_ln1119_1_fu_1028_p2) + unsigned(select_ln1098_1_fu_1021_p3));
    add_ln1124_fu_739_p2 <= std_logic_vector(unsigned(sub_ln1119_fu_734_p2) + unsigned(select_ln1098_fu_727_p3));
    add_ln25_fu_280_p2 <= std_logic_vector(unsigned(i_fu_150) + unsigned(ap_const_lv31_1));
    add_ln35_fu_306_p2 <= std_logic_vector(signed(sext_ln25_reg_1101) + signed(zext_ln25_fu_286_p1));
    add_ln36_fu_321_p2 <= std_logic_vector(signed(sext_ln25_1_reg_1106) + signed(zext_ln25_fu_286_p1));
    and_ln1104_1_fu_925_p2 <= (xor_ln1104_1_fu_907_p2 and p_Result_11_fu_918_p3);
    and_ln1104_fu_622_p2 <= (xor_ln1104_fu_604_p2 and p_Result_3_fu_615_p3);
    and_ln68_fu_361_p2 <= (tmp_2_reg_1124 and icmp_ln1649_fu_355_p2);
    and_ln86_fu_372_p2 <= (sinFixed_V_fu_348_p3 and currentSin_V_4_fu_341_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, mag_empty_n, theta_empty_n, convertSize_empty_n)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (convertSize_empty_n = ap_const_logic_0) or (theta_empty_n = ap_const_logic_0) or (mag_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(realStream2_empty_n, imgStream3_empty_n, icmp_ln25_fu_275_p2)
    begin
        if ((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_gmem_AWREADY, grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_0) or (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mag_empty_n, theta_empty_n, convertSize_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (convertSize_empty_n = ap_const_logic_0) or (theta_empty_n = ap_const_logic_0) or (mag_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(realStream2_empty_n, imgStream3_empty_n, icmp_ln25_fu_275_p2)
    begin
                ap_block_state2 <= (((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, realStream2_empty_n, imgStream3_empty_n, ap_CS_fsm_state2, icmp_ln25_fu_275_p2)
    begin
        if ((not((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(realStream2_empty_n, imgStream3_empty_n, ap_CS_fsm_state2, icmp_ln25_fu_275_p2)
    begin
        if ((not((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    convertSize_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, convertSize_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            convertSize_blk_n <= convertSize_empty_n;
        else 
            convertSize_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    convertSize_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mag_empty_n, theta_empty_n, convertSize_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (convertSize_empty_n = ap_const_logic_0) or (theta_empty_n = ap_const_logic_0) or (mag_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            convertSize_read <= ap_const_logic_1;
        else 
            convertSize_read <= ap_const_logic_0;
        end if; 
    end process;

    currentCos_V_fu_386_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(sinFixed_V_fu_348_p3));
    currentSin_V_4_fu_341_p3 <= (trunc_ln838_reg_1114 & ap_const_lv12_0);

    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start <= grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg;
    grp_fu_1069_p1 <= ap_const_lv36_9B7(12 - 1 downto 0);
    icmp_ln1090_1_fu_782_p2 <= "1" when (currentCos_V_7_reg_1220 = ap_const_lv24_0) else "0";
    icmp_ln1090_fu_467_p2 <= "1" when (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out = ap_const_lv24_0) else "0";
    icmp_ln1101_1_fu_861_p2 <= "1" when (signed(tmp_12_fu_851_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1101_fu_558_p2 <= "1" when (signed(tmp_8_fu_548_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1102_1_fu_887_p2 <= "0" when (p_Result_10_fu_882_p2 = ap_const_lv24_0) else "1";
    icmp_ln1102_fu_584_p2 <= "0" when (p_Result_4_fu_579_p2 = ap_const_lv24_0) else "1";
    icmp_ln1113_1_fu_945_p2 <= "1" when (signed(lsb_index_1_fu_846_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1113_fu_642_p2 <= "1" when (signed(lsb_index_fu_543_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1649_fu_355_p2 <= "1" when (signed(sinFixed_V_fu_348_p3) > signed(ap_const_lv24_0)) else "0";
    icmp_ln25_fu_275_p2 <= "1" when (signed(zext_ln25_1_fu_271_p1) < signed(convertSize_read_reg_1096)) else "0";

    imgStream3_blk_n_assign_proc : process(imgStream3_empty_n, ap_CS_fsm_state2, icmp_ln25_fu_275_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1))) then 
            imgStream3_blk_n <= imgStream3_empty_n;
        else 
            imgStream3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgStream3_read_assign_proc : process(realStream2_empty_n, imgStream3_empty_n, ap_CS_fsm_state2, icmp_ln25_fu_275_p2)
    begin
        if ((not((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1))) then 
            imgStream3_read <= ap_const_logic_1;
        else 
            imgStream3_read <= ap_const_logic_0;
        end if; 
    end process;

    
    l_1_fu_820_p3_proc : process(sext_ln1198_1_fu_816_p1)
    begin
        l_1_fu_820_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1198_1_fu_816_p1(i) = '1' then
                l_1_fu_820_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_517_p3_proc : process(sext_ln1198_fu_513_p1)
    begin
        l_fu_517_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1198_fu_513_p1(i) = '1' then
                l_fu_517_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_1_fu_846_p2 <= std_logic_vector(unsigned(sub_ln1099_1_reg_1250) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_543_p2 <= std_logic_vector(unsigned(sub_ln1099_reg_1178) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1102_1_fu_876_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1102_1_fu_872_p1(24-1 downto 0)))));
    lshr_ln1102_fu_573_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1102_fu_569_p1(24-1 downto 0)))));
    lshr_ln1113_1_fu_963_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1112_1_fu_951_p1),to_integer(unsigned('0' & zext_ln1113_1_fu_959_p1(31-1 downto 0)))));
    lshr_ln1113_fu_660_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1112_fu_648_p1),to_integer(unsigned('0' & zext_ln1113_fu_656_p1(31-1 downto 0)))));
    m_2_fu_681_p3 <= 
        lshr_ln1113_fu_660_p2 when (icmp_ln1113_reg_1205(0) = '1') else 
        shl_ln1114_fu_675_p2;
    m_3_fu_691_p2 <= std_logic_vector(unsigned(m_2_fu_681_p3) + unsigned(zext_ln1116_fu_688_p1));
    m_7_fu_984_p3 <= 
        lshr_ln1113_1_fu_963_p2 when (icmp_ln1113_1_reg_1277(0) = '1') else 
        shl_ln1114_1_fu_978_p2;
    m_8_fu_994_p2 <= std_logic_vector(unsigned(m_7_fu_984_p3) + unsigned(zext_ln1116_1_fu_991_p1));
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;

    m_axi_gmem_AWADDR_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, gmem_addr_reg_1129, gmem_addr_1_reg_1135, grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done)
    begin
        if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWADDR <= gmem_addr_1_reg_1135;
        elsif (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_AWADDR <= gmem_addr_reg_1129;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done)
    begin
        if (((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_RREADY <= ap_const_logic_0;

    m_axi_gmem_WDATA_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state13, select_ln1090_reg_1227, select_ln1090_1_reg_1292)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_axi_gmem_WDATA <= select_ln1090_1_reg_1292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_axi_gmem_WDATA <= select_ln1090_reg_1227;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mag_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mag_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mag_blk_n <= mag_empty_n;
        else 
            mag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mag_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mag_empty_n, theta_empty_n, convertSize_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (convertSize_empty_n = ap_const_logic_0) or (theta_empty_n = ap_const_logic_0) or (mag_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mag_read <= ap_const_logic_1;
        else 
            mag_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1104_1_fu_937_p3 <= (ap_const_lv1_0 & or_ln1104_fu_931_p2);
    or_ln1104_2_fu_628_p2 <= (and_ln1104_fu_622_p2 or a_fu_590_p2);
    or_ln1104_fu_931_p2 <= (and_ln1104_1_fu_925_p2 or a_1_fu_893_p2);
    or_ln68_fu_442_p2 <= (tmp_6_fu_392_p3 or and_ln68_fu_361_p2);
    or_ln_fu_634_p3 <= (ap_const_lv1_0 & or_ln1104_2_fu_628_p2);
    p_Result_10_fu_882_p2 <= (tmp_V_5_reg_1243 and lshr_ln1102_1_fu_876_p2);
    p_Result_11_fu_918_p3 <= tmp_V_5_reg_1243(to_integer(unsigned(add_ln1104_1_fu_913_p2)) downto to_integer(unsigned(add_ln1104_1_fu_913_p2))) when (to_integer(unsigned(add_ln1104_1_fu_913_p2)) >= 0 and to_integer(unsigned(add_ln1104_1_fu_913_p2)) <=23) else "-";
    p_Result_14_fu_473_p3 <= grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out(23 downto 23);
    p_Result_15_fu_505_p3 <= (ap_const_lv1_1 & p_Result_s_fu_495_p4);
    p_Result_16_fu_752_p5 <= (zext_ln1117_fu_724_p1(63 downto 32) & tmp_3_fu_745_p3 & zext_ln1117_fu_724_p1(22 downto 0));
    p_Result_18_fu_808_p3 <= (ap_const_lv1_1 & p_Result_8_fu_798_p4);
    p_Result_19_fu_1046_p5 <= (zext_ln1117_1_fu_1018_p1(63 downto 32) & tmp_5_fu_1039_p3 & zext_ln1117_1_fu_1018_p1(22 downto 0));
    p_Result_3_fu_615_p3 <= tmp_V_4_reg_1171(to_integer(unsigned(add_ln1104_fu_610_p2)) downto to_integer(unsigned(add_ln1104_fu_610_p2))) when (to_integer(unsigned(add_ln1104_fu_610_p2)) >= 0 and to_integer(unsigned(add_ln1104_fu_610_p2)) <=23) else "-";
    p_Result_4_fu_579_p2 <= (tmp_V_4_reg_1171 and lshr_ln1102_fu_573_p2);
    
    p_Result_8_fu_798_p4_proc : process(tmp_V_5_fu_792_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable p_Result_8_fu_798_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_792_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for p_Result_8_fu_798_p4_i in 0 to 24-1 loop
                v0_cpy(p_Result_8_fu_798_p4_i) := tmp_V_5_fu_792_p3(24-1-p_Result_8_fu_798_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_8_fu_798_p4 <= resvalue(24-1 downto 0);
    end process;

    
    p_Result_s_fu_495_p4_proc : process(tmp_V_4_fu_487_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable p_Result_s_fu_495_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_487_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for p_Result_s_fu_495_p4_i in 0 to 24-1 loop
                v0_cpy(p_Result_s_fu_495_p4_i) := tmp_V_4_fu_487_p3(24-1-p_Result_s_fu_495_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_495_p4 <= resvalue(24-1 downto 0);
    end process;


    realStream2_blk_n_assign_proc : process(realStream2_empty_n, ap_CS_fsm_state2, icmp_ln25_fu_275_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1))) then 
            realStream2_blk_n <= realStream2_empty_n;
        else 
            realStream2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    realStream2_read_assign_proc : process(realStream2_empty_n, imgStream3_empty_n, ap_CS_fsm_state2, icmp_ln25_fu_275_p2)
    begin
        if ((not((((imgStream3_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)) or ((realStream2_empty_n = ap_const_logic_0) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_275_p2 = ap_const_lv1_1))) then 
            realStream2_read <= ap_const_logic_1;
        else 
            realStream2_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1090_1_fu_1062_p3 <= 
        ap_const_lv32_0 when (icmp_ln1090_1_reg_1238(0) = '1') else 
        LD_1_fu_1058_p1;
    select_ln1090_fu_768_p3 <= 
        ap_const_lv32_0 when (icmp_ln1090_reg_1161(0) = '1') else 
        LD_fu_764_p1;
    select_ln1098_1_fu_1021_p3 <= 
        ap_const_lv8_7F when (p_Result_12_reg_1287(0) = '1') else 
        ap_const_lv8_7E;
    select_ln1098_fu_727_p3 <= 
        ap_const_lv8_7F when (p_Result_5_reg_1215(0) = '1') else 
        ap_const_lv8_7E;
    select_ln68_1_fu_425_p3 <= 
        sinFixed_V_fu_348_p3 when (and_ln68_fu_361_p2(0) = '1') else 
        select_ln86_fu_400_p3;
    select_ln68_2_fu_434_p3 <= 
        ap_const_lv14_1921 when (and_ln68_fu_361_p2(0) = '1') else 
        ap_const_lv14_26DF;
    select_ln68_3_fu_448_p3 <= 
        select_ln68_2_fu_434_p3 when (or_ln68_fu_442_p2(0) = '1') else 
        ap_const_lv14_0;
    select_ln68_fu_416_p3 <= 
        swapTemp_V_1_fu_366_p2 when (and_ln68_fu_361_p2(0) = '1') else 
        select_ln86_1_fu_408_p3;
    select_ln86_1_fu_408_p3 <= 
        currentSin_V_4_fu_341_p3 when (tmp_4_fu_378_p3(0) = '1') else 
        sinFixed_V_fu_348_p3;
    select_ln86_fu_400_p3 <= 
        currentCos_V_fu_386_p2 when (tmp_4_fu_378_p3(0) = '1') else 
        currentSin_V_4_fu_341_p3;
        sext_ln1198_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_18_fu_808_p3),32));

        sext_ln1198_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_15_fu_505_p3),32));

        sext_ln25_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln25_1_fu_249_p4),63));

        sext_ln25_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_235_p4),63));

        sext_ln35_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_fu_306_p2),64));

        sext_ln36_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_fu_321_p2),64));

    shl_ln1114_1_fu_978_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1112_1_fu_951_p1),to_integer(unsigned('0' & zext_ln1114_1_fu_974_p1(31-1 downto 0)))));
    shl_ln1114_fu_675_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1112_fu_648_p1),to_integer(unsigned('0' & zext_ln1114_fu_671_p1(31-1 downto 0)))));
    sinFixed_V_fu_348_p3 <= (trunc_ln838_1_reg_1119 & ap_const_lv12_0);
    sub_ln1099_1_fu_828_p2 <= std_logic_vector(unsigned(ap_const_lv32_18) - unsigned(l_1_fu_820_p3));
    sub_ln1099_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv32_18) - unsigned(l_fu_517_p3));
    sub_ln1102_1_fu_867_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(trunc_ln1102_1_reg_1262));
    sub_ln1102_fu_564_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(trunc_ln1102_reg_1190));
    sub_ln1114_1_fu_969_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1099_1_reg_1250));
    sub_ln1114_fu_666_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1099_reg_1178));
    sub_ln1119_1_fu_1028_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln1098_1_reg_1267));
    sub_ln1119_fu_734_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln1098_reg_1195));
    swapTemp_V_1_fu_366_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(currentSin_V_4_fu_341_p3));

    theta_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, theta_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            theta_blk_n <= theta_empty_n;
        else 
            theta_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    theta_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mag_empty_n, theta_empty_n, convertSize_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (convertSize_empty_n = ap_const_logic_0) or (theta_empty_n = ap_const_logic_0) or (mag_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            theta_read <= ap_const_logic_1;
        else 
            theta_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_851_p4 <= lsb_index_1_fu_846_p2(31 downto 1);
    tmp_13_fu_899_p3 <= lsb_index_1_fu_846_p2(31 downto 31);
    tmp_3_fu_745_p3 <= (p_Result_14_reg_1166 & add_ln1124_fu_739_p2);
    tmp_4_fu_378_p3 <= and_ln86_fu_372_p2(23 downto 23);
    tmp_5_fu_1039_p3 <= (p_Result_17_reg_1232 & add_ln1124_1_fu_1033_p2);
    tmp_6_fu_392_p3 <= and_ln86_fu_372_p2(23 downto 23);
    tmp_8_fu_548_p4 <= lsb_index_fu_543_p2(31 downto 1);
    tmp_9_fu_596_p3 <= lsb_index_fu_543_p2(31 downto 31);
    tmp_V_2_fu_787_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(currentCos_V_7_reg_1220));
    tmp_V_4_fu_487_p3 <= 
        tmp_V_fu_481_p2 when (p_Result_14_fu_473_p3(0) = '1') else 
        grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out;
    tmp_V_5_fu_792_p3 <= 
        tmp_V_2_fu_787_p2 when (p_Result_17_reg_1232(0) = '1') else 
        currentCos_V_7_reg_1220;
    tmp_V_fu_481_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out));
    trunc_ln1098_1_fu_842_p1 <= l_1_fu_820_p3(8 - 1 downto 0);
    trunc_ln1098_fu_539_p1 <= l_fu_517_p3(8 - 1 downto 0);
    trunc_ln1099_1_fu_834_p1 <= sub_ln1099_1_fu_828_p2(24 - 1 downto 0);
    trunc_ln1099_fu_531_p1 <= sub_ln1099_fu_525_p2(24 - 1 downto 0);
    trunc_ln1102_1_fu_838_p1 <= sub_ln1099_1_fu_828_p2(5 - 1 downto 0);
    trunc_ln1102_fu_535_p1 <= sub_ln1099_fu_525_p2(5 - 1 downto 0);
    trunc_ln25_1_fu_249_p4 <= mag_dout(63 downto 2);
    trunc_ln838_1_fu_294_p1 <= imgStream3_dout(12 - 1 downto 0);
    trunc_ln838_fu_290_p1 <= realStream2_dout(12 - 1 downto 0);
    trunc_ln_fu_235_p4 <= theta_dout(63 downto 2);
    xor_ln1104_1_fu_907_p2 <= (tmp_13_fu_899_p3 xor ap_const_lv1_1);
    xor_ln1104_fu_604_p2 <= (tmp_9_fu_596_p3 xor ap_const_lv1_1);
    zext_ln1102_1_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1102_1_fu_867_p2),24));
    zext_ln1102_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1102_fu_564_p2),24));
    zext_ln1112_1_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1243),64));
    zext_ln1112_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1171),64));
    zext_ln1113_1_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1113_1_fu_954_p2),64));
    zext_ln1113_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1113_fu_651_p2),64));
    zext_ln1114_1_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1114_1_fu_969_p2),64));
    zext_ln1114_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1114_fu_666_p2),64));
    zext_ln1116_1_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1104_1_reg_1272),64));
    zext_ln1116_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1200),64));
    zext_ln1117_1_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_10_reg_1282),64));
    zext_ln1117_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_9_reg_1210),64));
    zext_ln25_1_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_150),32));
    zext_ln25_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_150),63));
end behav;
