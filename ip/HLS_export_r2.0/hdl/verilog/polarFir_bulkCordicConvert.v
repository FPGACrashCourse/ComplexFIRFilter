// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polarFir_bulkCordicConvert (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        realStream2_dout,
        realStream2_num_data_valid,
        realStream2_fifo_cap,
        realStream2_empty_n,
        realStream2_read,
        imgStream3_dout,
        imgStream3_num_data_valid,
        imgStream3_fifo_cap,
        imgStream3_empty_n,
        imgStream3_read,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        mag_dout,
        mag_num_data_valid,
        mag_fifo_cap,
        mag_empty_n,
        mag_read,
        theta_dout,
        theta_num_data_valid,
        theta_fifo_cap,
        theta_empty_n,
        theta_read,
        convertSize_dout,
        convertSize_num_data_valid,
        convertSize_fifo_cap,
        convertSize_empty_n,
        convertSize_read
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [17:0] realStream2_dout;
input  [1:0] realStream2_num_data_valid;
input  [1:0] realStream2_fifo_cap;
input   realStream2_empty_n;
output   realStream2_read;
input  [17:0] imgStream3_dout;
input  [1:0] imgStream3_num_data_valid;
input  [1:0] imgStream3_fifo_cap;
input   imgStream3_empty_n;
output   imgStream3_read;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] mag_dout;
input  [2:0] mag_num_data_valid;
input  [2:0] mag_fifo_cap;
input   mag_empty_n;
output   mag_read;
input  [63:0] theta_dout;
input  [2:0] theta_num_data_valid;
input  [2:0] theta_fifo_cap;
input   theta_empty_n;
output   theta_read;
input  [31:0] convertSize_dout;
input  [1:0] convertSize_num_data_valid;
input  [1:0] convertSize_fifo_cap;
input   convertSize_empty_n;
output   convertSize_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg realStream2_read;
reg imgStream3_read;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg m_axi_gmem_BREADY;
reg mag_read;
reg theta_read;
reg convertSize_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    realStream2_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln25_fu_275_p2;
reg    imgStream3_blk_n;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state9;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
reg    mag_blk_n;
reg    theta_blk_n;
reg    convertSize_blk_n;
reg   [31:0] convertSize_read_reg_1096;
wire  signed [62:0] sext_ln25_fu_245_p1;
reg  signed [62:0] sext_ln25_reg_1101;
wire  signed [62:0] sext_ln25_1_fu_259_p1;
reg  signed [62:0] sext_ln25_1_reg_1106;
wire   [11:0] trunc_ln838_fu_290_p1;
reg   [11:0] trunc_ln838_reg_1114;
wire   [11:0] trunc_ln838_1_fu_294_p1;
reg   [11:0] trunc_ln838_1_reg_1119;
reg   [0:0] tmp_2_reg_1124;
reg   [63:0] gmem_addr_reg_1129;
reg   [63:0] gmem_addr_1_reg_1135;
wire   [23:0] select_ln68_fu_416_p3;
reg   [23:0] select_ln68_reg_1141;
wire   [23:0] select_ln68_1_fu_425_p3;
reg   [23:0] select_ln68_1_reg_1146;
wire   [13:0] select_ln68_3_fu_448_p3;
reg   [13:0] select_ln68_3_reg_1151;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln1090_fu_467_p2;
reg   [0:0] icmp_ln1090_reg_1161;
wire   [0:0] p_Result_14_fu_473_p3;
reg   [0:0] p_Result_14_reg_1166;
wire   [23:0] tmp_V_4_fu_487_p3;
reg   [23:0] tmp_V_4_reg_1171;
wire   [31:0] sub_ln1099_fu_525_p2;
reg   [31:0] sub_ln1099_reg_1178;
wire   [23:0] trunc_ln1099_fu_531_p1;
reg   [23:0] trunc_ln1099_reg_1185;
wire   [4:0] trunc_ln1102_fu_535_p1;
reg   [4:0] trunc_ln1102_reg_1190;
wire   [7:0] trunc_ln1098_fu_539_p1;
reg   [7:0] trunc_ln1098_reg_1195;
wire   [1:0] or_ln_fu_634_p3;
reg   [1:0] or_ln_reg_1200;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln1113_fu_642_p2;
reg   [0:0] icmp_ln1113_reg_1205;
reg   [62:0] m_9_reg_1210;
wire    ap_CS_fsm_state7;
reg   [0:0] p_Result_5_reg_1215;
reg   [23:0] currentCos_V_7_reg_1220;
wire    ap_CS_fsm_state8;
wire   [31:0] select_ln1090_fu_768_p3;
reg   [31:0] select_ln1090_reg_1227;
reg   [0:0] p_Result_17_reg_1232;
wire   [0:0] icmp_ln1090_1_fu_782_p2;
reg   [0:0] icmp_ln1090_1_reg_1238;
wire   [23:0] tmp_V_5_fu_792_p3;
reg   [23:0] tmp_V_5_reg_1243;
wire   [31:0] sub_ln1099_1_fu_828_p2;
reg   [31:0] sub_ln1099_1_reg_1250;
wire   [23:0] trunc_ln1099_1_fu_834_p1;
reg   [23:0] trunc_ln1099_1_reg_1257;
wire   [4:0] trunc_ln1102_1_fu_838_p1;
reg   [4:0] trunc_ln1102_1_reg_1262;
wire   [7:0] trunc_ln1098_1_fu_842_p1;
reg   [7:0] trunc_ln1098_1_reg_1267;
wire   [1:0] or_ln1104_1_fu_937_p3;
reg   [1:0] or_ln1104_1_reg_1272;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln1113_1_fu_945_p2;
reg   [0:0] icmp_ln1113_1_reg_1277;
reg   [62:0] m_10_reg_1282;
wire    ap_CS_fsm_state11;
reg   [0:0] p_Result_12_reg_1287;
wire   [31:0] select_ln1090_1_fu_1062_p3;
reg   [31:0] select_ln1090_1_reg_1292;
wire    ap_CS_fsm_state12;
wire    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start;
wire    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done;
wire    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_idle;
wire    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_ready;
wire  signed [23:0] grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out;
wire    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out_ap_vld;
wire   [23:0] grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out;
wire    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out_ap_vld;
reg    grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg;
wire  signed [63:0] sext_ln35_fu_311_p1;
wire  signed [63:0] sext_ln36_fu_326_p1;
reg   [30:0] i_fu_150;
wire   [30:0] add_ln25_fu_280_p2;
reg    ap_block_state2;
reg    ap_block_state1;
wire   [61:0] trunc_ln_fu_235_p4;
wire   [61:0] trunc_ln25_1_fu_249_p4;
wire   [31:0] zext_ln25_1_fu_271_p1;
wire   [62:0] zext_ln25_fu_286_p1;
wire   [62:0] add_ln35_fu_306_p2;
wire   [62:0] add_ln36_fu_321_p2;
wire   [23:0] sinFixed_V_fu_348_p3;
wire   [0:0] icmp_ln1649_fu_355_p2;
wire   [23:0] currentSin_V_4_fu_341_p3;
wire   [23:0] and_ln86_fu_372_p2;
wire   [0:0] tmp_4_fu_378_p3;
wire   [23:0] currentCos_V_fu_386_p2;
wire   [0:0] and_ln68_fu_361_p2;
wire   [23:0] swapTemp_V_1_fu_366_p2;
wire   [23:0] select_ln86_1_fu_408_p3;
wire   [23:0] select_ln86_fu_400_p3;
wire   [0:0] tmp_6_fu_392_p3;
wire   [0:0] or_ln68_fu_442_p2;
wire   [13:0] select_ln68_2_fu_434_p3;
wire   [23:0] tmp_V_fu_481_p2;
reg   [23:0] p_Result_s_fu_495_p4;
wire   [24:0] p_Result_15_fu_505_p3;
wire  signed [31:0] sext_ln1198_fu_513_p1;
reg   [31:0] l_fu_517_p3;
wire   [31:0] lsb_index_fu_543_p2;
wire   [30:0] tmp_8_fu_548_p4;
wire   [4:0] sub_ln1102_fu_564_p2;
wire   [23:0] zext_ln1102_fu_569_p1;
wire   [23:0] lshr_ln1102_fu_573_p2;
wire   [23:0] p_Result_4_fu_579_p2;
wire   [0:0] icmp_ln1101_fu_558_p2;
wire   [0:0] icmp_ln1102_fu_584_p2;
wire   [0:0] tmp_9_fu_596_p3;
wire   [23:0] add_ln1104_fu_610_p2;
wire   [0:0] p_Result_3_fu_615_p3;
wire   [0:0] xor_ln1104_fu_604_p2;
wire   [0:0] and_ln1104_fu_622_p2;
wire   [0:0] a_fu_590_p2;
wire   [0:0] or_ln1104_2_fu_628_p2;
wire   [31:0] add_ln1113_fu_651_p2;
wire   [63:0] zext_ln1112_fu_648_p1;
wire   [63:0] zext_ln1113_fu_656_p1;
wire   [31:0] sub_ln1114_fu_666_p2;
wire   [63:0] zext_ln1114_fu_671_p1;
wire   [63:0] lshr_ln1113_fu_660_p2;
wire   [63:0] shl_ln1114_fu_675_p2;
wire   [63:0] m_2_fu_681_p3;
wire   [63:0] zext_ln1116_fu_688_p1;
wire   [63:0] m_3_fu_691_p2;
wire  signed [35:0] grp_fu_1069_p2;
wire   [7:0] sub_ln1119_fu_734_p2;
wire   [7:0] select_ln1098_fu_727_p3;
wire   [7:0] add_ln1124_fu_739_p2;
wire   [63:0] zext_ln1117_fu_724_p1;
wire   [8:0] tmp_3_fu_745_p3;
wire   [63:0] p_Result_16_fu_752_p5;
wire   [31:0] LD_fu_764_p1;
wire   [23:0] tmp_V_2_fu_787_p2;
reg   [23:0] p_Result_8_fu_798_p4;
wire   [24:0] p_Result_18_fu_808_p3;
wire  signed [31:0] sext_ln1198_1_fu_816_p1;
reg   [31:0] l_1_fu_820_p3;
wire   [31:0] lsb_index_1_fu_846_p2;
wire   [30:0] tmp_12_fu_851_p4;
wire   [4:0] sub_ln1102_1_fu_867_p2;
wire   [23:0] zext_ln1102_1_fu_872_p1;
wire   [23:0] lshr_ln1102_1_fu_876_p2;
wire   [23:0] p_Result_10_fu_882_p2;
wire   [0:0] icmp_ln1101_1_fu_861_p2;
wire   [0:0] icmp_ln1102_1_fu_887_p2;
wire   [0:0] tmp_13_fu_899_p3;
wire   [23:0] add_ln1104_1_fu_913_p2;
wire   [0:0] p_Result_11_fu_918_p3;
wire   [0:0] xor_ln1104_1_fu_907_p2;
wire   [0:0] and_ln1104_1_fu_925_p2;
wire   [0:0] a_1_fu_893_p2;
wire   [0:0] or_ln1104_fu_931_p2;
wire   [31:0] add_ln1113_1_fu_954_p2;
wire   [63:0] zext_ln1112_1_fu_951_p1;
wire   [63:0] zext_ln1113_1_fu_959_p1;
wire   [31:0] sub_ln1114_1_fu_969_p2;
wire   [63:0] zext_ln1114_1_fu_974_p1;
wire   [63:0] lshr_ln1113_1_fu_963_p2;
wire   [63:0] shl_ln1114_1_fu_978_p2;
wire   [63:0] m_7_fu_984_p3;
wire   [63:0] zext_ln1116_1_fu_991_p1;
wire   [63:0] m_8_fu_994_p2;
wire   [7:0] sub_ln1119_1_fu_1028_p2;
wire   [7:0] select_ln1098_1_fu_1021_p3;
wire   [7:0] add_ln1124_1_fu_1033_p2;
wire   [63:0] zext_ln1117_1_fu_1018_p1;
wire   [8:0] tmp_5_fu_1039_p3;
wire   [63:0] p_Result_19_fu_1046_p5;
wire   [31:0] LD_1_fu_1058_p1;
wire   [11:0] grp_fu_1069_p1;
reg   [17:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
#0 grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg = 1'b0;
end

polarFir_bulkCordicConvert_Pipeline_ROTATOR grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start),
    .ap_done(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done),
    .ap_idle(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_idle),
    .ap_ready(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_ready),
    .select_ln68(select_ln68_reg_1141),
    .select_ln68_1(select_ln68_1_reg_1146),
    .sext_ln113(select_ln68_3_reg_1151),
    .currentCos_V_out(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out),
    .currentCos_V_out_ap_vld(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out_ap_vld),
    .p_out(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out),
    .p_out_ap_vld(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out_ap_vld)
);

polarFir_mul_mul_24s_12ns_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 36 ))
mul_mul_24s_12ns_36_4_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_currentCos_V_out),
    .din1(grp_fu_1069_p1),
    .ce(1'b1),
    .dout(grp_fu_1069_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg <= 1'b0;
    end else begin
        if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg <= 1'b1;
        end else if ((grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_ready == 1'b1)) begin
            grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (convertSize_empty_n == 1'b0) | (theta_empty_n == 1'b0) | (mag_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_150 <= 31'd0;
    end else if ((~(((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd1))) begin
        i_fu_150 <= add_ln25_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        convertSize_read_reg_1096 <= convertSize_dout;
        sext_ln25_1_reg_1106 <= sext_ln25_1_fu_259_p1;
        sext_ln25_reg_1101 <= sext_ln25_fu_245_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        currentCos_V_7_reg_1220 <= {{grp_fu_1069_p2[35:12]}};
        p_Result_17_reg_1232 <= grp_fu_1069_p2[32'd35];
        select_ln1090_reg_1227 <= select_ln1090_fu_768_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd1))) begin
        gmem_addr_1_reg_1135 <= sext_ln36_fu_326_p1;
        gmem_addr_reg_1129 <= sext_ln35_fu_311_p1;
        tmp_2_reg_1124 <= realStream2_dout[32'd11];
        trunc_ln838_1_reg_1119 <= trunc_ln838_1_fu_294_p1;
        trunc_ln838_reg_1114 <= trunc_ln838_fu_290_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln1090_1_reg_1238 <= icmp_ln1090_1_fu_782_p2;
        sub_ln1099_1_reg_1250 <= sub_ln1099_1_fu_828_p2;
        tmp_V_5_reg_1243 <= tmp_V_5_fu_792_p3;
        trunc_ln1098_1_reg_1267 <= trunc_ln1098_1_fu_842_p1;
        trunc_ln1099_1_reg_1257 <= trunc_ln1099_1_fu_834_p1;
        trunc_ln1102_1_reg_1262 <= trunc_ln1102_1_fu_838_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln1090_reg_1161 <= icmp_ln1090_fu_467_p2;
        p_Result_14_reg_1166 <= grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out[32'd23];
        sub_ln1099_reg_1178 <= sub_ln1099_fu_525_p2;
        tmp_V_4_reg_1171 <= tmp_V_4_fu_487_p3;
        trunc_ln1098_reg_1195 <= trunc_ln1098_fu_539_p1;
        trunc_ln1099_reg_1185 <= trunc_ln1099_fu_531_p1;
        trunc_ln1102_reg_1190 <= trunc_ln1102_fu_535_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1090_1_reg_1238 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        icmp_ln1113_1_reg_1277 <= icmp_ln1113_1_fu_945_p2;
        or_ln1104_1_reg_1272[0] <= or_ln1104_1_fu_937_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1090_reg_1161 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln1113_reg_1205 <= icmp_ln1113_fu_642_p2;
        or_ln_reg_1200[0] <= or_ln_fu_634_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1090_1_reg_1238 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        m_10_reg_1282 <= {{m_8_fu_994_p2[63:1]}};
        p_Result_12_reg_1287 <= m_8_fu_994_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1090_reg_1161 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_9_reg_1210 <= {{m_3_fu_691_p2[63:1]}};
        p_Result_5_reg_1215 <= m_3_fu_691_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        select_ln1090_1_reg_1292 <= select_ln1090_1_fu_1062_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        select_ln68_1_reg_1146[23 : 12] <= select_ln68_1_fu_425_p3[23 : 12];
        select_ln68_3_reg_1151 <= select_ln68_3_fu_448_p3;
        select_ln68_reg_1141[23 : 12] <= select_ln68_fu_416_p3[23 : 12];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (convertSize_empty_n == 1'b0) | (theta_empty_n == 1'b0) | (mag_empty_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b0) | (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done == 1'b0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~(((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        convertSize_blk_n = convertSize_empty_n;
    end else begin
        convertSize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (convertSize_empty_n == 1'b0) | (theta_empty_n == 1'b0) | (mag_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        convertSize_read = 1'b1;
    end else begin
        convertSize_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd1))) begin
        imgStream3_blk_n = imgStream3_empty_n;
    end else begin
        imgStream3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd1))) begin
        imgStream3_read = 1'b1;
    end else begin
        imgStream3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_AWREADY == 1'b0) | (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWADDR = gmem_addr_1_reg_1135;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_AWADDR = gmem_addr_reg_1129;
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((m_axi_gmem_AWREADY == 1'b0) | (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        m_axi_gmem_WDATA = select_ln1090_1_reg_1292;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        m_axi_gmem_WDATA = select_ln1090_reg_1227;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mag_blk_n = mag_empty_n;
    end else begin
        mag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (convertSize_empty_n == 1'b0) | (theta_empty_n == 1'b0) | (mag_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mag_read = 1'b1;
    end else begin
        mag_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd1))) begin
        realStream2_blk_n = realStream2_empty_n;
    end else begin
        realStream2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd1))) begin
        realStream2_read = 1'b1;
    end else begin
        realStream2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        theta_blk_n = theta_empty_n;
    end else begin
        theta_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (convertSize_empty_n == 1'b0) | (theta_empty_n == 1'b0) | (mag_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        theta_read = 1'b1;
    end else begin
        theta_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (convertSize_empty_n == 1'b0) | (theta_empty_n == 1'b0) | (mag_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((m_axi_gmem_AWREADY == 1'b0) | (grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_1_fu_1058_p1 = p_Result_19_fu_1046_p5[31:0];

assign LD_fu_764_p1 = p_Result_16_fu_752_p5[31:0];

assign a_1_fu_893_p2 = (icmp_ln1102_1_fu_887_p2 & icmp_ln1101_1_fu_861_p2);

assign a_fu_590_p2 = (icmp_ln1102_fu_584_p2 & icmp_ln1101_fu_558_p2);

assign add_ln1104_1_fu_913_p2 = ($signed(trunc_ln1099_1_reg_1257) + $signed(24'd16777192));

assign add_ln1104_fu_610_p2 = ($signed(trunc_ln1099_reg_1185) + $signed(24'd16777192));

assign add_ln1113_1_fu_954_p2 = ($signed(sub_ln1099_1_reg_1250) + $signed(32'd4294967271));

assign add_ln1113_fu_651_p2 = ($signed(sub_ln1099_reg_1178) + $signed(32'd4294967271));

assign add_ln1124_1_fu_1033_p2 = (sub_ln1119_1_fu_1028_p2 + select_ln1098_1_fu_1021_p3);

assign add_ln1124_fu_739_p2 = (sub_ln1119_fu_734_p2 + select_ln1098_fu_727_p3);

assign add_ln25_fu_280_p2 = (i_fu_150 + 31'd1);

assign add_ln35_fu_306_p2 = ($signed(sext_ln25_reg_1101) + $signed(zext_ln25_fu_286_p1));

assign add_ln36_fu_321_p2 = ($signed(sext_ln25_1_reg_1106) + $signed(zext_ln25_fu_286_p1));

assign and_ln1104_1_fu_925_p2 = (xor_ln1104_1_fu_907_p2 & p_Result_11_fu_918_p3);

assign and_ln1104_fu_622_p2 = (xor_ln1104_fu_604_p2 & p_Result_3_fu_615_p3);

assign and_ln68_fu_361_p2 = (tmp_2_reg_1124 & icmp_ln1649_fu_355_p2);

assign and_ln86_fu_372_p2 = (sinFixed_V_fu_348_p3 & currentSin_V_4_fu_341_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (convertSize_empty_n == 1'b0) | (theta_empty_n == 1'b0) | (mag_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2 = (((imgStream3_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)) | ((realStream2_empty_n == 1'b0) & (icmp_ln25_fu_275_p2 == 1'd1)));
end

assign currentCos_V_fu_386_p2 = (24'd0 - sinFixed_V_fu_348_p3);

assign currentSin_V_4_fu_341_p3 = {{trunc_ln838_reg_1114}, {12'd0}};

assign grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start = grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_ap_start_reg;

assign grp_fu_1069_p1 = 36'd2487;

assign icmp_ln1090_1_fu_782_p2 = ((currentCos_V_7_reg_1220 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln1090_fu_467_p2 = ((grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln1101_1_fu_861_p2 = (($signed(tmp_12_fu_851_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1101_fu_558_p2 = (($signed(tmp_8_fu_548_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1102_1_fu_887_p2 = ((p_Result_10_fu_882_p2 != 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln1102_fu_584_p2 = ((p_Result_4_fu_579_p2 != 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln1113_1_fu_945_p2 = (($signed(lsb_index_1_fu_846_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1113_fu_642_p2 = (($signed(lsb_index_fu_543_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_fu_355_p2 = (($signed(sinFixed_V_fu_348_p3) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_275_p2 = (($signed(zext_ln25_1_fu_271_p1) < $signed(convertSize_read_reg_1096)) ? 1'b1 : 1'b0);


always @ (sext_ln1198_1_fu_816_p1) begin
    if (sext_ln1198_1_fu_816_p1[0] == 1'b1) begin
        l_1_fu_820_p3 = 32'd0;
    end else if (sext_ln1198_1_fu_816_p1[1] == 1'b1) begin
        l_1_fu_820_p3 = 32'd1;
    end else if (sext_ln1198_1_fu_816_p1[2] == 1'b1) begin
        l_1_fu_820_p3 = 32'd2;
    end else if (sext_ln1198_1_fu_816_p1[3] == 1'b1) begin
        l_1_fu_820_p3 = 32'd3;
    end else if (sext_ln1198_1_fu_816_p1[4] == 1'b1) begin
        l_1_fu_820_p3 = 32'd4;
    end else if (sext_ln1198_1_fu_816_p1[5] == 1'b1) begin
        l_1_fu_820_p3 = 32'd5;
    end else if (sext_ln1198_1_fu_816_p1[6] == 1'b1) begin
        l_1_fu_820_p3 = 32'd6;
    end else if (sext_ln1198_1_fu_816_p1[7] == 1'b1) begin
        l_1_fu_820_p3 = 32'd7;
    end else if (sext_ln1198_1_fu_816_p1[8] == 1'b1) begin
        l_1_fu_820_p3 = 32'd8;
    end else if (sext_ln1198_1_fu_816_p1[9] == 1'b1) begin
        l_1_fu_820_p3 = 32'd9;
    end else if (sext_ln1198_1_fu_816_p1[10] == 1'b1) begin
        l_1_fu_820_p3 = 32'd10;
    end else if (sext_ln1198_1_fu_816_p1[11] == 1'b1) begin
        l_1_fu_820_p3 = 32'd11;
    end else if (sext_ln1198_1_fu_816_p1[12] == 1'b1) begin
        l_1_fu_820_p3 = 32'd12;
    end else if (sext_ln1198_1_fu_816_p1[13] == 1'b1) begin
        l_1_fu_820_p3 = 32'd13;
    end else if (sext_ln1198_1_fu_816_p1[14] == 1'b1) begin
        l_1_fu_820_p3 = 32'd14;
    end else if (sext_ln1198_1_fu_816_p1[15] == 1'b1) begin
        l_1_fu_820_p3 = 32'd15;
    end else if (sext_ln1198_1_fu_816_p1[16] == 1'b1) begin
        l_1_fu_820_p3 = 32'd16;
    end else if (sext_ln1198_1_fu_816_p1[17] == 1'b1) begin
        l_1_fu_820_p3 = 32'd17;
    end else if (sext_ln1198_1_fu_816_p1[18] == 1'b1) begin
        l_1_fu_820_p3 = 32'd18;
    end else if (sext_ln1198_1_fu_816_p1[19] == 1'b1) begin
        l_1_fu_820_p3 = 32'd19;
    end else if (sext_ln1198_1_fu_816_p1[20] == 1'b1) begin
        l_1_fu_820_p3 = 32'd20;
    end else if (sext_ln1198_1_fu_816_p1[21] == 1'b1) begin
        l_1_fu_820_p3 = 32'd21;
    end else if (sext_ln1198_1_fu_816_p1[22] == 1'b1) begin
        l_1_fu_820_p3 = 32'd22;
    end else if (sext_ln1198_1_fu_816_p1[23] == 1'b1) begin
        l_1_fu_820_p3 = 32'd23;
    end else if (sext_ln1198_1_fu_816_p1[24] == 1'b1) begin
        l_1_fu_820_p3 = 32'd24;
    end else if (sext_ln1198_1_fu_816_p1[25] == 1'b1) begin
        l_1_fu_820_p3 = 32'd25;
    end else if (sext_ln1198_1_fu_816_p1[26] == 1'b1) begin
        l_1_fu_820_p3 = 32'd26;
    end else if (sext_ln1198_1_fu_816_p1[27] == 1'b1) begin
        l_1_fu_820_p3 = 32'd27;
    end else if (sext_ln1198_1_fu_816_p1[28] == 1'b1) begin
        l_1_fu_820_p3 = 32'd28;
    end else if (sext_ln1198_1_fu_816_p1[29] == 1'b1) begin
        l_1_fu_820_p3 = 32'd29;
    end else if (sext_ln1198_1_fu_816_p1[30] == 1'b1) begin
        l_1_fu_820_p3 = 32'd30;
    end else if (sext_ln1198_1_fu_816_p1[31] == 1'b1) begin
        l_1_fu_820_p3 = 32'd31;
    end else begin
        l_1_fu_820_p3 = 32'd32;
    end
end


always @ (sext_ln1198_fu_513_p1) begin
    if (sext_ln1198_fu_513_p1[0] == 1'b1) begin
        l_fu_517_p3 = 32'd0;
    end else if (sext_ln1198_fu_513_p1[1] == 1'b1) begin
        l_fu_517_p3 = 32'd1;
    end else if (sext_ln1198_fu_513_p1[2] == 1'b1) begin
        l_fu_517_p3 = 32'd2;
    end else if (sext_ln1198_fu_513_p1[3] == 1'b1) begin
        l_fu_517_p3 = 32'd3;
    end else if (sext_ln1198_fu_513_p1[4] == 1'b1) begin
        l_fu_517_p3 = 32'd4;
    end else if (sext_ln1198_fu_513_p1[5] == 1'b1) begin
        l_fu_517_p3 = 32'd5;
    end else if (sext_ln1198_fu_513_p1[6] == 1'b1) begin
        l_fu_517_p3 = 32'd6;
    end else if (sext_ln1198_fu_513_p1[7] == 1'b1) begin
        l_fu_517_p3 = 32'd7;
    end else if (sext_ln1198_fu_513_p1[8] == 1'b1) begin
        l_fu_517_p3 = 32'd8;
    end else if (sext_ln1198_fu_513_p1[9] == 1'b1) begin
        l_fu_517_p3 = 32'd9;
    end else if (sext_ln1198_fu_513_p1[10] == 1'b1) begin
        l_fu_517_p3 = 32'd10;
    end else if (sext_ln1198_fu_513_p1[11] == 1'b1) begin
        l_fu_517_p3 = 32'd11;
    end else if (sext_ln1198_fu_513_p1[12] == 1'b1) begin
        l_fu_517_p3 = 32'd12;
    end else if (sext_ln1198_fu_513_p1[13] == 1'b1) begin
        l_fu_517_p3 = 32'd13;
    end else if (sext_ln1198_fu_513_p1[14] == 1'b1) begin
        l_fu_517_p3 = 32'd14;
    end else if (sext_ln1198_fu_513_p1[15] == 1'b1) begin
        l_fu_517_p3 = 32'd15;
    end else if (sext_ln1198_fu_513_p1[16] == 1'b1) begin
        l_fu_517_p3 = 32'd16;
    end else if (sext_ln1198_fu_513_p1[17] == 1'b1) begin
        l_fu_517_p3 = 32'd17;
    end else if (sext_ln1198_fu_513_p1[18] == 1'b1) begin
        l_fu_517_p3 = 32'd18;
    end else if (sext_ln1198_fu_513_p1[19] == 1'b1) begin
        l_fu_517_p3 = 32'd19;
    end else if (sext_ln1198_fu_513_p1[20] == 1'b1) begin
        l_fu_517_p3 = 32'd20;
    end else if (sext_ln1198_fu_513_p1[21] == 1'b1) begin
        l_fu_517_p3 = 32'd21;
    end else if (sext_ln1198_fu_513_p1[22] == 1'b1) begin
        l_fu_517_p3 = 32'd22;
    end else if (sext_ln1198_fu_513_p1[23] == 1'b1) begin
        l_fu_517_p3 = 32'd23;
    end else if (sext_ln1198_fu_513_p1[24] == 1'b1) begin
        l_fu_517_p3 = 32'd24;
    end else if (sext_ln1198_fu_513_p1[25] == 1'b1) begin
        l_fu_517_p3 = 32'd25;
    end else if (sext_ln1198_fu_513_p1[26] == 1'b1) begin
        l_fu_517_p3 = 32'd26;
    end else if (sext_ln1198_fu_513_p1[27] == 1'b1) begin
        l_fu_517_p3 = 32'd27;
    end else if (sext_ln1198_fu_513_p1[28] == 1'b1) begin
        l_fu_517_p3 = 32'd28;
    end else if (sext_ln1198_fu_513_p1[29] == 1'b1) begin
        l_fu_517_p3 = 32'd29;
    end else if (sext_ln1198_fu_513_p1[30] == 1'b1) begin
        l_fu_517_p3 = 32'd30;
    end else if (sext_ln1198_fu_513_p1[31] == 1'b1) begin
        l_fu_517_p3 = 32'd31;
    end else begin
        l_fu_517_p3 = 32'd32;
    end
end

assign lsb_index_1_fu_846_p2 = ($signed(sub_ln1099_1_reg_1250) + $signed(32'd4294967272));

assign lsb_index_fu_543_p2 = ($signed(sub_ln1099_reg_1178) + $signed(32'd4294967272));

assign lshr_ln1102_1_fu_876_p2 = 24'd16777215 >> zext_ln1102_1_fu_872_p1;

assign lshr_ln1102_fu_573_p2 = 24'd16777215 >> zext_ln1102_fu_569_p1;

assign lshr_ln1113_1_fu_963_p2 = zext_ln1112_1_fu_951_p1 >> zext_ln1113_1_fu_959_p1;

assign lshr_ln1113_fu_660_p2 = zext_ln1112_fu_648_p1 >> zext_ln1113_fu_656_p1;

assign m_2_fu_681_p3 = ((icmp_ln1113_reg_1205[0:0] == 1'b1) ? lshr_ln1113_fu_660_p2 : shl_ln1114_fu_675_p2);

assign m_3_fu_691_p2 = (m_2_fu_681_p3 + zext_ln1116_fu_688_p1);

assign m_7_fu_984_p3 = ((icmp_ln1113_1_reg_1277[0:0] == 1'b1) ? lshr_ln1113_1_fu_963_p2 : shl_ln1114_1_fu_978_p2);

assign m_8_fu_994_p2 = (m_7_fu_984_p3 + zext_ln1116_1_fu_991_p1);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln1104_1_fu_937_p3 = {{1'd0}, {or_ln1104_fu_931_p2}};

assign or_ln1104_2_fu_628_p2 = (and_ln1104_fu_622_p2 | a_fu_590_p2);

assign or_ln1104_fu_931_p2 = (and_ln1104_1_fu_925_p2 | a_1_fu_893_p2);

assign or_ln68_fu_442_p2 = (tmp_6_fu_392_p3 | and_ln68_fu_361_p2);

assign or_ln_fu_634_p3 = {{1'd0}, {or_ln1104_2_fu_628_p2}};

assign p_Result_10_fu_882_p2 = (tmp_V_5_reg_1243 & lshr_ln1102_1_fu_876_p2);

assign p_Result_11_fu_918_p3 = tmp_V_5_reg_1243[add_ln1104_1_fu_913_p2];

assign p_Result_14_fu_473_p3 = grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out[32'd23];

assign p_Result_15_fu_505_p3 = {{1'd1}, {p_Result_s_fu_495_p4}};

assign p_Result_16_fu_752_p5 = {{zext_ln1117_fu_724_p1[63:32]}, {tmp_3_fu_745_p3}, {zext_ln1117_fu_724_p1[22:0]}};

assign p_Result_18_fu_808_p3 = {{1'd1}, {p_Result_8_fu_798_p4}};

assign p_Result_19_fu_1046_p5 = {{zext_ln1117_1_fu_1018_p1[63:32]}, {tmp_5_fu_1039_p3}, {zext_ln1117_1_fu_1018_p1[22:0]}};

assign p_Result_3_fu_615_p3 = tmp_V_4_reg_1171[add_ln1104_fu_610_p2];

assign p_Result_4_fu_579_p2 = (tmp_V_4_reg_1171 & lshr_ln1102_fu_573_p2);

integer ap_tvar_int_0;

always @ (tmp_V_5_fu_792_p3) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            p_Result_8_fu_798_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_8_fu_798_p4[ap_tvar_int_0] = tmp_V_5_fu_792_p3[23 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (tmp_V_4_fu_487_p3) begin
    for (ap_tvar_int_1 = 24 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 23 - 0) begin
            p_Result_s_fu_495_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_s_fu_495_p4[ap_tvar_int_1] = tmp_V_4_fu_487_p3[23 - ap_tvar_int_1];
        end
    end
end

assign select_ln1090_1_fu_1062_p3 = ((icmp_ln1090_1_reg_1238[0:0] == 1'b1) ? 32'd0 : LD_1_fu_1058_p1);

assign select_ln1090_fu_768_p3 = ((icmp_ln1090_reg_1161[0:0] == 1'b1) ? 32'd0 : LD_fu_764_p1);

assign select_ln1098_1_fu_1021_p3 = ((p_Result_12_reg_1287[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln1098_fu_727_p3 = ((p_Result_5_reg_1215[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln68_1_fu_425_p3 = ((and_ln68_fu_361_p2[0:0] == 1'b1) ? sinFixed_V_fu_348_p3 : select_ln86_fu_400_p3);

assign select_ln68_2_fu_434_p3 = ((and_ln68_fu_361_p2[0:0] == 1'b1) ? 14'd6433 : 14'd9951);

assign select_ln68_3_fu_448_p3 = ((or_ln68_fu_442_p2[0:0] == 1'b1) ? select_ln68_2_fu_434_p3 : 14'd0);

assign select_ln68_fu_416_p3 = ((and_ln68_fu_361_p2[0:0] == 1'b1) ? swapTemp_V_1_fu_366_p2 : select_ln86_1_fu_408_p3);

assign select_ln86_1_fu_408_p3 = ((tmp_4_fu_378_p3[0:0] == 1'b1) ? currentSin_V_4_fu_341_p3 : sinFixed_V_fu_348_p3);

assign select_ln86_fu_400_p3 = ((tmp_4_fu_378_p3[0:0] == 1'b1) ? currentCos_V_fu_386_p2 : currentSin_V_4_fu_341_p3);

assign sext_ln1198_1_fu_816_p1 = $signed(p_Result_18_fu_808_p3);

assign sext_ln1198_fu_513_p1 = $signed(p_Result_15_fu_505_p3);

assign sext_ln25_1_fu_259_p1 = $signed(trunc_ln25_1_fu_249_p4);

assign sext_ln25_fu_245_p1 = $signed(trunc_ln_fu_235_p4);

assign sext_ln35_fu_311_p1 = $signed(add_ln35_fu_306_p2);

assign sext_ln36_fu_326_p1 = $signed(add_ln36_fu_321_p2);

assign shl_ln1114_1_fu_978_p2 = zext_ln1112_1_fu_951_p1 << zext_ln1114_1_fu_974_p1;

assign shl_ln1114_fu_675_p2 = zext_ln1112_fu_648_p1 << zext_ln1114_fu_671_p1;

assign sinFixed_V_fu_348_p3 = {{trunc_ln838_1_reg_1119}, {12'd0}};

assign sub_ln1099_1_fu_828_p2 = (32'd24 - l_1_fu_820_p3);

assign sub_ln1099_fu_525_p2 = (32'd24 - l_fu_517_p3);

assign sub_ln1102_1_fu_867_p2 = ($signed(5'd17) - $signed(trunc_ln1102_1_reg_1262));

assign sub_ln1102_fu_564_p2 = ($signed(5'd17) - $signed(trunc_ln1102_reg_1190));

assign sub_ln1114_1_fu_969_p2 = (32'd25 - sub_ln1099_1_reg_1250);

assign sub_ln1114_fu_666_p2 = (32'd25 - sub_ln1099_reg_1178);

assign sub_ln1119_1_fu_1028_p2 = (8'd12 - trunc_ln1098_1_reg_1267);

assign sub_ln1119_fu_734_p2 = (8'd12 - trunc_ln1098_reg_1195);

assign swapTemp_V_1_fu_366_p2 = (24'd0 - currentSin_V_4_fu_341_p3);

assign tmp_12_fu_851_p4 = {{lsb_index_1_fu_846_p2[31:1]}};

assign tmp_13_fu_899_p3 = lsb_index_1_fu_846_p2[32'd31];

assign tmp_3_fu_745_p3 = {{p_Result_14_reg_1166}, {add_ln1124_fu_739_p2}};

assign tmp_4_fu_378_p3 = and_ln86_fu_372_p2[32'd23];

assign tmp_5_fu_1039_p3 = {{p_Result_17_reg_1232}, {add_ln1124_1_fu_1033_p2}};

assign tmp_6_fu_392_p3 = and_ln86_fu_372_p2[32'd23];

assign tmp_8_fu_548_p4 = {{lsb_index_fu_543_p2[31:1]}};

assign tmp_9_fu_596_p3 = lsb_index_fu_543_p2[32'd31];

assign tmp_V_2_fu_787_p2 = (24'd0 - currentCos_V_7_reg_1220);

assign tmp_V_4_fu_487_p3 = ((p_Result_14_fu_473_p3[0:0] == 1'b1) ? tmp_V_fu_481_p2 : grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out);

assign tmp_V_5_fu_792_p3 = ((p_Result_17_reg_1232[0:0] == 1'b1) ? tmp_V_2_fu_787_p2 : currentCos_V_7_reg_1220);

assign tmp_V_fu_481_p2 = (24'd0 - grp_bulkCordicConvert_Pipeline_ROTATOR_fu_224_p_out);

assign trunc_ln1098_1_fu_842_p1 = l_1_fu_820_p3[7:0];

assign trunc_ln1098_fu_539_p1 = l_fu_517_p3[7:0];

assign trunc_ln1099_1_fu_834_p1 = sub_ln1099_1_fu_828_p2[23:0];

assign trunc_ln1099_fu_531_p1 = sub_ln1099_fu_525_p2[23:0];

assign trunc_ln1102_1_fu_838_p1 = sub_ln1099_1_fu_828_p2[4:0];

assign trunc_ln1102_fu_535_p1 = sub_ln1099_fu_525_p2[4:0];

assign trunc_ln25_1_fu_249_p4 = {{mag_dout[63:2]}};

assign trunc_ln838_1_fu_294_p1 = imgStream3_dout[11:0];

assign trunc_ln838_fu_290_p1 = realStream2_dout[11:0];

assign trunc_ln_fu_235_p4 = {{theta_dout[63:2]}};

assign xor_ln1104_1_fu_907_p2 = (tmp_13_fu_899_p3 ^ 1'd1);

assign xor_ln1104_fu_604_p2 = (tmp_9_fu_596_p3 ^ 1'd1);

assign zext_ln1102_1_fu_872_p1 = sub_ln1102_1_fu_867_p2;

assign zext_ln1102_fu_569_p1 = sub_ln1102_fu_564_p2;

assign zext_ln1112_1_fu_951_p1 = tmp_V_5_reg_1243;

assign zext_ln1112_fu_648_p1 = tmp_V_4_reg_1171;

assign zext_ln1113_1_fu_959_p1 = add_ln1113_1_fu_954_p2;

assign zext_ln1113_fu_656_p1 = add_ln1113_fu_651_p2;

assign zext_ln1114_1_fu_974_p1 = sub_ln1114_1_fu_969_p2;

assign zext_ln1114_fu_671_p1 = sub_ln1114_fu_666_p2;

assign zext_ln1116_1_fu_991_p1 = or_ln1104_1_reg_1272;

assign zext_ln1116_fu_688_p1 = or_ln_reg_1200;

assign zext_ln1117_1_fu_1018_p1 = m_10_reg_1282;

assign zext_ln1117_fu_724_p1 = m_9_reg_1210;

assign zext_ln25_1_fu_271_p1 = i_fu_150;

assign zext_ln25_fu_286_p1 = i_fu_150;

always @ (posedge ap_clk) begin
    select_ln68_reg_1141[11:0] <= 12'b000000000000;
    select_ln68_1_reg_1146[11:0] <= 12'b000000000000;
    or_ln_reg_1200[1] <= 1'b0;
    or_ln1104_1_reg_1272[1] <= 1'b0;
end

endmodule //polarFir_bulkCordicConvert
